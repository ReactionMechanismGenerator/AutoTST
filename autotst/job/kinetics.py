#!/usr/bin/python
# -*- coding: utf-8 -*-

##########################################################################
#
#   AutoTST - Automated Transition State Theory
#
#   Copyright (c) 2015-2020 Richard H. West (r.west@northeastern.edu)
#   and the AutoTST Team
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the 'Software'),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included in
#   all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#   DEALINGS IN THE SOFTWARE.
#
##########################################################################

import os, time, shutil
import numpy as np
import pandas as pd
import subprocess
import multiprocessing
import logging
FORMAT = "%(filename)s:%(lineno)d %(funcName)s %(levelname)s %(message)s"
logging.basicConfig(format=FORMAT, level=logging.INFO)

from .job import Job
from ..calculator.gaussian import Gaussian
from ..calculator.vibrational_analysis import VibrationalAnalysis, percent_change
from ..calculator.statmech import StatMech
from ..reaction import Reaction, TS
from ..species import Species, Conformer
from ..geometry import Bond, Angle, Torsion, CisTrans, ChiralCenter
import cclib.io 
import ase
import rmgpy
import rmgpy.molecule


class KineticsJob(Job):
    """
    A class to deal with the input and output of calculations
    """

    def __init__(
            self,
            reaction = None,
            calculator = None, # An AutoTST Gaussian calculator with proper directory settings
            conformer_calculator = None, # an ASE Calculator object to perform the conformer analysis with
            username = None, # the username of the
            partition = None, # The partition to run calculations on
            directory = None, # where to save your files 
            scratch = None, # a directory for temporary files generated by calculators
            exclude = None, # nodes that you wish to exclude
            account = None # the account that you wish to charge for 
            ):

        #assert isinstance(reaction, (Reaction, None)), "Please provide an AutoTST Reaction object"
       
        super().__init__(calculator, conformer_calculator, username, partition, directory, scratch, exclude, account)

        self.reaction = reaction
        if self.reaction:
            self.label = self.reaction.label
        else:
            self.label = None

        manager = multiprocessing.Manager()
        global global_results
        global_results = manager.dict()

    def __repr__(self):
        return f"< KineticsJob '{self.label}'>"

    def submit_transitionstate(self, transitionstate, opt_type, restart=False):
        """
        A methods to submit a job for a TS object based on a single calculator
        """
        assert transitionstate, "Please provide a transitionstate to submit a job"
        self.calculator.conformer = transitionstate
        # setting the optimization type
        if opt_type.lower() == "shell":
            ase_calculator = self.calculator.get_shell_calc()
        elif opt_type.lower() == "center":
            ase_calculator = self.calculator.get_center_calc()
        elif opt_type.lower() == "overall":
            ase_calculator = self.calculator.get_overall_calc()
        elif opt_type.lower() == "irc":
            ase_calculator = self.calculator.get_irc_calc()

        nproc = ase_calculator.nprocshared

        self.write_input(transitionstate, ase_calculator)

        label = ase_calculator.label
        scratch = ase_calculator.scratch
        file_path = os.path.join(scratch, label)
        # for testing
        os.environ["FILE_PATH"] = file_path

        attempted = False
        if os.path.exists(file_path + ".log"):
            attempted = True
            logging.info(f"It appears that {label} has already been attempted...")

        if (not attempted) or restart:
            command = [
                """sbatch""", 
                f"""--job-name="{label}" """, 
                f"""--output="{label}.slurm.log" """, 
                f"""--error="{label}.slurm.log" """,
                """-N 1""",
                f"""-n {nproc}""",
                """-t 24:00:00""",
                f"--mem {self.calculator.settings['mem']}"
            ]
            # Building on the remaining commands
            if self.partition:
                command.append(f"""-p {self.partition}""")
            if self.exclude:
                if isinstance(self.exclude, str):
                    command.append(f"""--exclude={self.exclude}""")
                elif isinstance(self.exclude, list):
                    exc = ""
                    for e in self.exclude:
                        exc += e
                        exc += ","
                    exc = exc[:-1]
                    command.append(f"""--exclude={exc}""")
            if self.account:
                command.append(f"""-A {self.account}""")
            
            command.append(f"""--wrap="{self.calculator.command} '{file_path}.com' > '{file_path}.log'" """)
            exe = ""
            for c in command:
                exe += c + " " #combining the command into a single string, this makes submit go faster.
            if self.check_complete(label): #checking to see if the job is already in the queue
                # if it's not, then we're gona submit it
                self.submit(exe)
            else:
                # it's currently in the queue, so not actually submitting it
                return label
        return label

    def calculate_transitionstate(self, transitionstate, vibrational_analysis=True):
        """
        A method to perform the partial optimizations for a transitionstate and arrive
        at a final geometry. Returns True if we arrived at a final geometry, returns false
        if there is an error along the way.
        """

        ts_identifier = f"{transitionstate.reaction_label}_{transitionstate.direction}_{transitionstate.index}"

        for opt_type in ["shell", "overall"]:
            self.calculator.conformer = transitionstate

            if opt_type == "overall":
                 file_path = f"{transitionstate.reaction_label}_{transitionstate.direction}_{transitionstate.index}.log"
            else:
                 file_path = f"{transitionstate.reaction_label}_{transitionstate.direction}_{opt_type}_{transitionstate.index}.log"

            file_path = os.path.join(
                self.directory, 
                "ts", 
                transitionstate.reaction_label, 
                "conformers", 
                file_path
            )


            if not os.path.exists(file_path):
                logging.info(
                    f"Submitting {opt_type.upper()} calculations for {ts_identifier}")
                label = self.submit_transitionstate(
                    transitionstate, opt_type=opt_type.lower())
                while not self.check_complete(label):
                    time.sleep(90)

            else:
                logging.info(
                    f"It appears that we already have a complete {opt_type.upper()} log file for {ts_identifier}")

                complete, converged = self.calculator.verify_output_file(file_path)
                
                if not complete:
                    logging.info(
                        f"It seems that the {opt_type.upper()} file never completed for {ts_identifier} never completed, running it again")
                    label = self.submit_transitionstate(
                        transitionstate, opt_type=opt_type.lower(), restart=True)
                    while not self.check_complete(label):
                        time.sleep(90)

            complete, converged = self.calculator.verify_output_file(file_path)

            if not (complete and converged):
                logging.info(
                    f"{ts_identifier} failed the {opt_type.upper()} optimization")
                global_results[ts_identifier] = False
                return False
            logging.info(
                f"{ts_identifier} successfully completed the {opt_type.upper()} optimization!")
            transitionstate._ase_molecule = self.read_log(file_path)
            transitionstate.update_coords_from("ase")

        logging.info(
            f"Calculations for {ts_identifier} are complete and resulted in a normal termination!")

        got_one = self.validate_transitionstate(
                transitionstate=transitionstate, vibrational_analysis=vibrational_analysis)
        if got_one:
            global_results[ts_identifier] = True
            return True
        else:
            global_results[ts_identifier] = False
            return False

    def calculate_reaction(self, vibrational_analysis=True, restart=False):
        """
        A method to run calculations for all tranitionstates for a reaction
        """

        logging.info(f"Calculating geometries for {self.reaction}")
        if not restart: 
            if os.path.exists(
                os.path.join(self.directory, "ts", self.reaction.label, self.reaction.label + ".log")):
                logging.info("This reaction has already been run and has a successful validated transition state! :)")
                return True



        if self.conformer_calculator:
            self.reaction.generate_conformers(ase_calculator=self.conformer_calculator)

        currently_running = []
        processes = {}

        for direction, transitionstates in list(self.reaction.ts.items()):

            for transitionstate in transitionstates:

                process = multiprocessing.Process(target=self.calculate_transitionstate, args=(
                    transitionstate,))
                processes[process.name] = process

        for name, process in list(processes.items()):
            while len(currently_running) >= 50:
                for running in currently_running:
                    if not processes[running].is_alive():
                        currently_running.remove(name)
                time.sleep(90)
            time.sleep(90)
            process.start()
            process.join()
            currently_running.append(name)

        while len(currently_running) > 0:
            for name, process in list(processes.items()):
                if not (name in currently_running):
                    continue
                if not process.is_alive():
                    currently_running.remove(name)
            time.sleep(90) 

        energies = []
        for label, result in global_results.items():
            if not result:
                logging.info(f"Calculations for {label} FAILED")
                continue
            f = f"{label}.log"
            path = os.path.join(self.calculator.directory, "ts",
                    self.reaction.label, "conformers", f)
            if not os.path.exists(path):
                logging.info(f"It appears that {f} failed...")
                continue
            try:
                parser = cclib.io.ccread(path, loglevel=logging.ERROR)
                if parser is None:
                    logging.info(
                        f"Something went wrong when reading in results for {f}...")
                    continue
                energy = parser.scfenergies[-1]
            except:
                logging.info(
                    f"The parser does not have an scf energies attribute, we are not considering {f}")
                energy = 1e5

            energies.append([energy, transitionstate, f])

        energies = pd.DataFrame(
            energies, columns=["energy", "transitionstate", "file"]).sort_values("energy").reset_index()

        if energies.shape[0] == 0:
            logging.info(
                f"No transition state for {self.reaction} was successfully calculated... :(")
            return False

        energies.reset_index(inplace=True)
        lowest_energy_label = energies.iloc[0].file
        logging.info(f"The lowest energy transition state is {lowest_energy_label}")

        shutil.copyfile(
            os.path.join(self.calculator.directory, "ts", self.reaction.label,
                         "conformers", lowest_energy_label),
            os.path.join(self.calculator.directory, "ts",
                         self.reaction.label, self.reaction.label + ".log")
        )
        logging.info(f"The lowest energy file is {lowest_energy_label}! :)")
        return True

    def validate_transitionstate(self, transitionstate, vibrational_analysis=True):

        validated = False
        if vibrational_analysis:
            vib = VibrationalAnalysis(
                transitionstate=transitionstate, directory=self.directory)
            validated = vib.validate_ts()
        if not validated:
            logging.info("Could not validate with Vibrational Analysis... Running an IRC to validate instead...")
            label = self.submit_transitionstate(
                transitionstate, opt_type="irc")
            while not self.check_complete(label):
                time.sleep(90)
            result = self.calculator.validate_irc()
            if result:
                logging.info("Validated via IRC")
                return True
            else:
                logging.info(
                    "Could not validate this conformer... trying the next lowest energy conformer")
                return False
        else:
            logging.info("Validated via Vibrational Analysis")
            return True
