from autotst.calculator.gaussian import Gaussian
from autotst.calculator.vibrational_analysis import VibrationalAnalysis, percent_change
from autotst.calculator.statmech import StatMech
from autotst.reaction import Reaction, TS
from autotst.species import Species, Conformer
from autotst.geometry import Bond, Angle, Torsion, CisTrans, ChiralCenter
from autotst.job.job import Job
from cclib.io import ccread
import cclib
from rmgpy.molecule import Molecule as RMGMolecule
from rmgpy.species import Species as RMGSpecies
from rmgpy.reaction import Reaction as RMGReaction, ReactionError
from rmgpy.kinetics import PDepArrhenius, PDepKineticsModel
from rmgpy.data.rmg import RMGDatabase
import rmgpy
from ase.calculators.gaussian import Gaussian as ASEGaussian
from ase.atoms import Atom, Atoms
import ase
import rdkit.Chem.rdDistGeom
import rdkit.DistanceGeometry
from rdkit.Chem.Pharm3D import EmbedLib
from rdkit.Chem import AllChem
from rdkit import Chem
import rdkit
import os
import time
import yaml
from shutil import move, copyfile
import numpy as np
import pandas as pd
import subprocess
import multiprocessing
from multiprocessing import Process, Manager
import logging
FORMAT = "%(filename)s:%(lineno)d %(funcName)s %(levelname)s %(message)s"
logging.basicConfig(format=FORMAT, level=logging.INFO)


class ThermoJob(Job):
    """
    A class to deal with the input and output of calculations
    """

    def __init__(
            self, 
            species = None, # The AutoTST species of interest         
            qm_calculator = None, # An AutoTST QM calculator with proper directory settings
            conformer_calculator = None, # an ASE Calculator object to perform conformer analysis with
            username = None, # Optional, the slurm username. Helpful if multiple users are running AutoTST on possibly identical species or reactions
            partition="general", # The partition to run calculations on
            exclude = None, # nodes that you wish to exclude
            directory = None, # where to save your files 
            scratch = None, # a directory for temporary files generated by calculators
            ):
        """
        """

        self.species = species
        if self.species:
            self.label = self.species.__repr__().split('"')[-2]
        else:
            self.label = None

        assert isinstance(exclude, (type(None), str, list)), "Please provide a string or list of string descriptions of the nodes you wish to exclude"
        self.partition = partition
        self.exclude = exclude
        self.username = username
        self.qm_calculator = qm_calculator

        ### Setting directory and scratch of the qm_calculator and the job to be the same
        if self.qm_calculator:
            if directory is None:
                logging.info("Job directory not specified... Setting Job directory to QMCalculator directory")
                self.directory = self.qm_calculator.directory
            else:
                logging.info("Setting calculator directory to Job directory")
                self.directory = self.qm_calculator.directory = directory
            
            if scratch is None:
                logging.info("Job scratch directory not specified...setting Job scratch to calculator scratch")
                self.scratch = self.qm_calculator.scratch
            else:
                logging.info("Setting calculator scratch to Job scratch")
                self.scratch = self.qm_calculator.scratch = scratch
        else:
            logging.info("No QMCalculator specified")
            if directory is None:
                logging.info("No directory specified... Setting Job directory to '.'")
                self.directory = '.'
            else:
                self.directory = directory
            if scratch is None:
                logging.info("No scratch directory specified... Setting scratch to '.'")
                self.scratch = '.'
            else:
                self.scratch = scratch

        ### Setting the Job's conformer calculator
        self.conformer_calculator = conformer_calculator
        if self.conformer_calculator:
            self.conformer_calculator.directory = self.scratch
            
        ### The manager that keeps track of all of our tasks
        manager = multiprocessing.Manager()
        global global_results
        global_results = manager.dict()

    def __repr__(self):
        return "< ThermoJob '{}'>".format(self.label)

    def optimize(self):
        """
        A method that will optimize all geometries needed for thermo calculation
        """
