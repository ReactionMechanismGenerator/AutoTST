from autotst.calculator.gaussian import Gaussian
from autotst.calculator.orca import Orca
#from autotst.calculator.arkane_input import Arkane_Input
#from autotst.calculator.HLCI import HLCI
from autotst.species import Species, Conformer
from autotst.reaction import Reaction, TS
from autotst.geometry import Bond, Angle, Torsion, CisTrans, ChiralCenter
import cclib
from cclib.io import ccread
from rmgpy.molecule import Molecule as RMGMolecule
from rmgpy.species import Species as RMGSpecies
import rmgpy
from ase.calculators.gaussian import Gaussian as ASEGaussian
from ase.atoms import Atom, Atoms
import ase
import rdkit.Chem.rdDistGeom
import rdkit.DistanceGeometry
from rdkit.Chem.Pharm3D import EmbedLib
from rdkit.Chem import AllChem
from rdkit import Chem
import rdkit
import os
import time
import yaml
from shutil import move, copyfile, copytree, rmtree
import numpy as np
import pandas as pd
import subprocess
from subprocess import STDOUT, check_output, TimeoutExpired, CalledProcessError
import multiprocessing
from multiprocessing import Process, Manager
import logging
from autotst.job.job import Job
FORMAT = "%(filename)s:%(lineno)d %(funcName)s %(levelname)s %(message)s"
logging.basicConfig(format=FORMAT, level=logging.INFO)

class ThermoJob(Job):
    """
    A class to deal with the input and output of calculations
    """

    def __init__(
            self,
            species = None,
            calculator = None, # An AutoTST Gaussian calculator with proper directory settings
            conformer_calculator = None, # an ASE Calculator object to perform the conformer analysis with
            username = None, # the username of the
            partition = None, # The partition to run calculations on
            directory = None, # where to save your files 
            scratch = None, # a directory for temporary files generated by calculators
            exclude = None, # nodes that you wish to exclude
            account = None # the account that you wish to charge for 
            ):
        
        super().__init__(calculator, conformer_calculator, username, partition, directory, scratch, exclude,
                         account)

        self.species = species
        if self.species:
            label = ""
            for smile in self.species.smiles:
                label += f"{smile} / "
            label = label.strip(" / ")
            self.label = label
        else:
            self.label = None

        manager = multiprocessing.Manager()
        global global_results
        global_results = manager.dict()

        self.rmg_mol = None
        self.torsion_conformer = None

    def __repr__(self):
        return "< ThermoJob '{}'>".format(self.label)

    # def _submit_conformer(self, conformer, calc, restart=False):
    #     """
    #     A methods to submit a job based on the calculator and partition provided
    #     """
    #     assert conformer, "Please provide a conformer to submit a job"

    #     if "orca" not in calc.label:
    #         write_input(conformer, calc)
    #         label = calc.label
    #     else:
    #         label = calc.write_sp_input()
    #     log_path = os.path.join(calc.scratch,label + '.log')
    #     gaussian_scratch = '/scratch/westgroup/GAUSS_SCRDIR/'
    #     os.environ['GAUSS_SCRDIR'] = gaussian_scratch
    #     if not os.path.exists(gaussian_scratch):
    #         os.makedirs(gaussian_scratch)

    #     os.environ["COMMAND"] = self.calculator.command  # only using gaussian for now
    #     os.environ["FILE_PATH"] = label
        
    #     attempted = False
    #     if os.path.exists(log_path):
    #         attempted = True
    #         if not restart:
    #             logging.info(
    #                 "It appears that this job has already been run, not running it a second time.")

    #     if not check_complete(label):
    #         logging.info("It appears that {} is already in the queue...not submitting".format(label))
    #         return label

    #     if restart or not attempted:
    #         if restart:
    #             logging.info(
    #                 "Restarting calculations for {}.".format(conformer)
    #             )
    #         else:
    #             logging.info("Starting calculations for {}".format(conformer))
    #         try:
    #             if "orca" not in calc.label:
    #                 output = subprocess.check_output(
    #                     """sbatch --exclude=c5003 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p {1} -N 1 -n {2} -t {3} --mem={4} $AUTOTST/autotst/job/submit.sh""".format(
    #                         label,calc.parameters["partition"],calc.parameters["nprocshared"],calc.parameters["time"],calc.parameters["mem"]), shell=True, cwd=calc.scratch, stderr=STDOUT
    #                         ).decode("utf-8")
    #             else:
    #                 output = subprocess.check_output(
    #                     """sbatch --exclude=c5003 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p {1} -N 1 -n {2} -t {3} --mem={4} $AUTOTST/autotst/job/orca_submit.sh""".format(
    #                         label,calc.partition,calc.nprocs,calc.time,calc.mem), shell=True, cwd=calc.directory, stderr=STDOUT
    #                         ).decode("utf-8")
    #         except CalledProcessError as e:
    #             logging.info(e)
    #             if not check_complete(label):
    #                 logging.info("It appears that {} is already in the queue...not submitting".format(label))
    #                 return label
    #             else:
    #                 logging.info("Resubmitting in 5 min")
    #                 time.sleep(300)
    #                 return self.submit(conformer, calc, restart)
            
    #         if 'Job violates accounting/QOS policy' in output:
    #             number_of_jobs =  self.get_jobs_in_queue(self.discovery_username)
    #             time.sleep(120)
    #             jobs = self.get_jobs_in_queue(self.discovery_username)
    #             while jobs >= number_of_jobs:
    #                 time.sleep(120)
    #                 jobs = self.get_jobs_in_queue(self.discovery_username)
    #             return self.submit(conformer, calc, restart)
            
    #     return label

    def calculate_conformer(self, conformer):
        """
        A method that optimizes a conformer and performs frequency analysis.
        If the conformer does not convergenge with tight convergence criteria,
        the convergence criteria is loosened to Gaussian's default criteria,
        and the optimization is rerun using the geometry from the last step of the Tight convergence optimization.
        Returns True if Gaussian log is complete and converged, and False if incomplete of unconverged.
        """

        self.calculator.conformer = conformer
        calc = self.calculator.get_conformer_calc()
        log_path = os.path.join(calc.scratch,calc.label + ".log")
        logging.info(
            "Submitting conformer calculation for {}".format(calc.label))

        label = self.submit(conformer,calc)
        time.sleep(15)
        while not self.check_complete(label):
            time.sleep(120)

        complete, converged = self.calculator.verify_output_file(log_path)

        if not complete:
            logging.info(
                "It seems that the file never completed for {} completed, running it again".format(calc.label))
            calc.parameters["time"] = "24:00:00"
            calc.parameters["mem"] = "60GB"
            ase_calculator.nprocshared["nprocshared"] = 8
            calc.parameters["partition"] = "short"
            label = self.submit(conformer,calc,restart=True)
            time.sleep(15)
            while not self.check_complete(label):
                time.sleep(120)

            complete, converged = self.calculator.verify_output_file(log_path)


        if (complete and converged):
            return check_isomorphic(conformer=conformer,log_path=log_path)

        if not complete: # try again
            logging.info(
                "It appears that {} was killed prematurely".format(calc.label))
            calc.parameters["time"] = "24:00:00"
            calc.parameters["mem"] = "60GB"
            calc.parameters["nprocshared"] = 8
            calc.parameters["partition"] = "short"
            label = self.submit(conformer,calc, restart=True)
            time.sleep(15)
            while not self.check_complete(label):
                time.sleep(120)

            complete, converged = self.calculator.verify_output_file(log_path)
            if (complete and converged):
                return check_isomorphic(conformer=conformer,log_path=log_path)
            elif not complete:
                logging.info(
                    "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False

        if not converged:

            if self.calculator.settings["convergence"] not in ["verytight", "tight"]:
                logging.info("{} did not converge".format(calc.label))
                return False
    
            logging.info("{} did not converge, trying it as a looser convergence criteria".format(calc.label))

            logging.info("Resubmitting {} with default convergence criteria".format(conformer))
            try:
                atoms = read_log(log_path)
                conformer._ase_molecule = atoms
                conformer.update_coords_from("ase")
            except:
                pass
            logging.info("Removing the old log file that didn't converge, restarting from last geometry")
            os.remove(log_path)
            self.calculator.conformer = conformer
            self.calculator.settings["convergence"] = ""
            calc = self.calculator.get_conformer_calc()

            label = self.submit(conformer,calc)
            time.sleep(15)
            while not self.check_complete(label):
                time.sleep(120)

            if not os.path.exists(log_path):
                logging.info(
                "It seems that {}'s loose optimization was never run...".format(calc.label))
                return False

            complete, converged = self.calculator.verify_output_file(log_path)

            if not complete:
                logging.info(
                "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False

            elif not converged:
                logging.info("{} failed second QM optimization :(".format(calc.label))
                return False

            else:
                return check_isomorphic(conformer=conformer,log_path=log_path)

        raise Exception("Shoudn't reach here")

    def calculate_sp(self,conformer,sp_method,restart=False):
        
        method_name = self.method_name

        if str(sp_method) != "orca":
            self.calculator.conformer = conformer
            self.calculator.settings["convergence"] = "TIGHT"
            self.calculator.settings["sp"] = sp_method
            calc = self.calculator.get_sp_calc()
            calc.scratch = calc.directory = os.path.join(
                self.directory,
                "species",
                method_name,
                conformer.smiles,
                "sp")
            calc.label = "{}_{}".format(conformer.smiles, sp_method)
            label = calc.label
            log_path = os.path.join(calc.scratch,calc.label + ".log")
            slurm_path = os.path.join(calc.scratch,calc.label + ".slurm.log")
        else:
            calc = Orca(conformer=conformer,directory=os.path.join(
                self.directory,
                "species",
                method_name,
                conformer.smiles,
                "sp"))
            # restart = True ######    remove this later
            calc.label = "{}_{}".format(conformer.smiles, sp_method)
            label = calc.label
            log_path = os.path.join(calc.scratch,calc.label + ".log")
            slurm_path = os.path.join(calc.scratch,calc.label + ".slurm.log")
            
        logging.info(
            "Submitting {} calculation".format(calc.label))
        label = self.submit(conformer,calc,restart)
        time.sleep(15)
        while not self.check_complete(label):
            time.sleep(60)

        if str(sp_method) == "orca":

            if calc.check_normal_termination(log_path) is True:
                logging.info("ORCA JOB COMPLETED")
                return True
            else:
                calc.time = "24:00:00"
                calc.partition = "short"
                calc.mem = "250GB"
                calc.nprocs = 28
                calc.mem_per_proc = calc.get_mem_per_proc()
                label = self.submit(conformer,calc,True)
                while not check_complete(label):
                    time.sleep(60)
                if calc.check_normal_termination(log_path) is True:
                    logging.info("ORCA JOB COMPLETED")
                    return True
                else:
                    logging.info("ORCA JOB FAILED")
                    return False

        complete, converged = self.calculator.verify_output_file(log_path)

        if (complete and converged):
            return check_isomorphic(conformer=conformer,log_path=log_path)

        if not complete: # try again
            logging.info(
                "It appears that {} was killed prematurely".format(calc.label))
            calc.parameters["time"] = "24:00:00"
            calc.parameters["nprocshared"] = 28
            calc.parameters["mem"] = "250Gb"
            calc.parameters["partition"] = "short"

            exceeded_mem = False
            lines = open(slurm_path,'r').readlines()
            for l in lines:
                if "Exceeded job memory limit" in l:
                    exceeded_mem = True
                    break

            if exceeded_mem is True:
                logging.info("{} exceeded mem limit, increasing mem to 375 Gb and resubmitting".format(calc.label))
                # calc.parameters["time"] = "24:00:00"
                # calc.parameters["nprocshared"] = 28
                # calc.parameters["mem"] = "250Gb"
                # calc.parameters["partition"] = "short"
            
            label = self.submit(conformer,calc, restart=True)
            time.sleep(15)
            while not self.check_complete(label):
                time.sleep(60)

            complete, converged = self.calculator.verify_output_file(log_path)
            
            if (complete and converged):
                logging.info("{} completed!".format(label))
                return check_isomorphic(conformer=conformer,log_path=log_path)
            elif not complete:
                logging.info(
                    "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False
            # else complete but not converged

        if not converged:
            logging.info("{} did not converge, trying it as a looser convergence criteria".format(calc.label))
            logging.info("Resubmitting {} with default convergence criteria".format(conformer))
            atoms = read_log(log_path)
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            self.calculator.conformer = conformer
            self.calculator.settings["convergence"] = ""
            calc = self.calculator.get_sp_calc()
            calc.scratch = calc.directory = os.path.join(
                self.directory,
                "species",
                method_name,
                conformer.smiles,
                "sp"
            )
            calc.label = "{}_{}".format(conformer.smiles, sp_method)
            logging.info("Removing the old log file that didn't converge, restarting from last geometry")
            os.remove(log_path)

            label = self.submit(conformer,calc)
            time.sleep(15)
            while not self.check_complete(label):
                time.sleep(60)

            if not os.path.exists(log_path):
                logging.info(
                "It seems that {}'s loose optimization was never run...".format(calc.label))
                return False

            complete, converged = self.calculator.verify_output_file(log_path)
            
            if (complete and converged):
                logging.info("{} completed!".format(label))
                return check_isomorphic(conformer=conformer,log_path=log_path)
            
            elif not complete:
                logging.info(
                    "It appears that {} was killed prematurely".format(calc.label))
                calc.parameters["time"] = "24:00:00"
                calc.parameters["nprocshared"] = 28
                calc.parameters["mem"] = "250Gb"
                calc.parameters["partition"] = "short"
                
                exceeded_mem = False
                lines = open(slurm_path,'r').readlines()
                for l in lines:
                    if "Exceeded job memory limit" in l:
                        exceeded_mem = True
                        break

                if exceeded_mem is True:
                    logging.info("{} exceeded mem limit, increasing mem to 375 Gb and resubmitting".format(calc.label))
                    # calc.parameters["time"] = "24:00:00"
                    # calc.parameters["nprocshared"] = 28
                    # calc.parameters["mem"] = "250Gb"

                label = self.submit(conformer,calc, restart=True)
                time.sleep(60)
                while not self.check_complete(label):
                    time.sleep(60)

                complete, converged = self.calculator.verify_output_file(log_path)
            
                if (complete and converged):
                    logging.info("{} completed!".format(label))
                    return check_isomorphic(conformer=conformer,log_path=log_path)
                elif not complete:
                    logging.info(
                        "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                    return False
                elif not converged:
                    logging.info("{} failed second QM optimization :(".format(calc.label))
                    return False

            elif not converged:
                logging.info("{} failed second QM optimization :(".format(calc.label))
                return False
     

################## rotor methods #############################################
    def calculate_rotors(self, conformer, steps=36, step_size=10.0, attempts=0):

        restart = False
        if attempts > 5:
            assert False
        if attempts > 0:
            restart = True
        complete = {}
        calculators = {}
        verified = {}
        if len(conformer.torsions) == 0:
            logging.info("No torsions to run scans on.")
            return {}

        for torsion in conformer.torsions:
            ase_calculator = self.calculator.get_rotor_calc(
                torsion.index)
            label = self.submit(
                conformer, ase_calculator, restart)
            logging.info(label)
            complete[label] = False
            verified[label] = False
            time.sleep(5)

        done = False
        lowest_energy_label = None
        conformer_error = False

        while not done:
            for label in list(complete.keys()):
                if not self.check_complete(label):
                    time.sleep(60)
                    continue
                if done:
                    continue
                complete[label] = True
                lowest_conf, continuous, atoms = self.verify_rotor(
                    conformer, label)
                if all([lowest_conf, continuous]):
                    verified[label] = True
                else:
                    verified[label] = False

                if not lowest_conf:
                    done = True
                    conformer_error = True
                    continue
                elif all(complete.values()):
                    done = True

        if conformer_error:
            logging.info(
                "A lower energy conformer was found... Going to optimize this instead")
            # assert False
            for label in list(complete.keys()):
                subprocess.call(
                    """scancel -n '{}'""".format(label), shell=True)
            # shutil.rmtree(self.directory,"species",self.method_name, conformer.smiles,"rotors")
            # if isinstance(conformer, TS):
            #     t = "ts"
            #     label = conformer.reaction_label
            #     file_name = os.path.join(
            #         self.directory, t, label, "rotors", lowest_energy_label + ".log")
            #     t = "ts"
            #     direction = conformer.direction
            # else:
            #     t = "species"
            #     label = conformer.smiles
            #     file_name = os.path.join(
            #         self.directory, t, self.method_name, label,"rotors", lowest_energy_label + ".log")

            #     direction = None

            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            # for index in ["X", "Y", "Z"]:
            #     # we do this because we now have a new conformer
            #     # the index starts at X and if another lower energy conformer arrises, we go to Y and so on
            #     if index != conformer.index:
            #         logging.info(
            #             "Setting index of {} to {}...".format(conformer, index))
            #         conformer.index = index
            #         break

            # if self.calculator.settings["sp"] == 'G4':
            #     self.calculator.settings["method"] = "B3LYP"
            #     self.calculator.settings["basis"] = "6-31G(2df,p)"
            #     self.calculator.settings["dispersion"] = None
            
            if not self.calculate_sp(conformer,'G4',True):
                assert False
            
            sp_dir = os.path.join(self.directory,"species",self.method_name,conformer.smiles,"sp")
            label = conformer.smiles + '_' + 'G4'
            log_path = os.path.join(sp_dir,label + '.log')
            complete, converged = self.calculator.verify_output_file(log_path)
            if not all([complete,converged]):
                logging.info("It seems the log file {} is incomplete or didnt converge".format(log_path))
                assert False
            # conformer = Conformer(smiles=self.rmg_mol.smiles)
            # conformer.smiles = smiles
            assert check_isomorphic(conformer,log_path)
            # conformer.rmg_molecule = self.rmg_mol
            atoms = read_log(log_path)
            mult = ccread(log_path, loglevel=logging.ERROR).mult
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            conformer.rmg_molecule.multiplicity = mult
            self.calculator.conformer = conformer
            self.calculator.settings["method"] = "B3LYP"
            self.calculator.settings["basis"] = "6-31G(2df,p)"
            self.calculator.settings["dispersion"] = None
            calc = self.calculator.get_freq_calc()
            label = self.submit(conformer,calc,restart=True)
            time.sleep(15)
            while not self.check_complete(label):
                time.sleep(60)

            logging.info(
                "Reoptimization complete... performing hindered rotors scans again")

            self.torsion_conformer = conformer.copy()
            self.calculator.conformer = conformer
            attempts += 1
            # if direction:
            #     file_name = "{}_{}_{}.log".format(
            #         label, direction, conformer.index)
            # else:
            #     file_name = "{}_{}.log".format(label, conformer.index)

     
            # log = os.path.join(self.directory,"species",method_name,conformer.smiles,"conformers",label+"_optfreq.log")
            # assert os.path.exists(log), "It appears the calculation failed for {}...cannot perform single point calculations".format(conformer.smiles)
            # complete, converged = self.calculator.verify_output_file(log)
            # assert all([complete, converged]), "It appears the log file in incomplete or did not converge"
            # atoms = read_log(log)
            # mult = ccread(log,loglevel=logging.ERROR).mult
            # conformer._ase_molecule = atoms
            # conformer.update_coords_from("ase")
            # conformer.rmg_molecule.multiplicity = mult

            # if not converged:
            #     logging.info(
            #         "The new geometry was unable to converge... Hindered rotor calculations failed... :(")
            #     for key in verified.keys():
            #         verified[key] = False
            #     return verified

            # logging.info(
            #     "The new geometry was able to successfully converge. Reattempting hindered rotor and G4 calculations")
            # if not self.calculate_sp(conformer,'G4',True)
            #     logging.warning("It seems the G4 calc failed")
            #     assert False
            # shutil.copyfile(
            #     log,
            #     os.path.join(self.directory, "species", self.method_name, conformer.smiles, label+"_optfreq.log")
            # )

            return self.calculate_rotors(conformer, steps, step_size, attempts)

        else:
            for label, boolean in list(verified.items()):
                if not boolean:
                    try:
                        if isinstance(conformer, TS):
                            file_path = os.path.join(
                                self.directory, "ts", conformer.reaction_label, "rotors")
                        else:
                            file_path = os.path.join(
                                self.directory, "species", self.method_name,conformer.smiles, "rotors")

                        os.mkdirs(os.path.join(file_path, failures))
                    except:
                        pass
                    shutil.move(
                        os.path.join(file_path, label + ".log"),
                        os.path.join(file_path, "failures",
                                     label + ".log")
                    )
            return verified

    def verify_rotor(self, conformer, label, steps=36, step_size=10.0):
        """
        A method that will 
        """

        if isinstance(conformer, TS):
            file_name = os.path.join(
                self.directory, "ts", conformer.reaction_label, "rotors", label + ".log")
        elif isinstance(conformer, Conformer):
             file_name = os.path.join(
                 self.directory, "species", self.method_name,conformer.smiles, "rotors", label + ".log")
        
        parser = cclib.io.ccread(file_name, loglevel=logging.ERROR)

        continuous = self.check_rotor_continuous(
            steps, step_size, parser=parser)
        if continuous is True:
            logging.info("Rotor scan {} is continuous".format(label))

        lowest_conf,atoms = self.check_rotor_lowest_conf(parser=parser)
        # [lowest_conf, energy, atomnos,
        #     atomcoords] = self.check_rotor_lowest_conf(parser=parser)
        #opt_count_check = self.check_rotor_opts(steps, parser=parser)
        #good_slope = self.check_rotor_slope(steps, step_size, parser=parser)

        # , good_slope, opt_count_check] ### Previously used, but the second two checks were deemed unecessary
        return (lowest_conf, continuous, atoms)

    def check_rotor_opts(self, steps, parser):

        #opt_indices = [i for i, status in enumerate(parser.optstatus) if status==2]
        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status > 1]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        n_opts_check = (steps + 1) == len(opt_SCFEnergies)

        return n_opts_check

    def check_rotor_slope(self, steps, step_size, parser, tol=0.1):

        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4, 5]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)

        max_slope = (max_energy - min_energy) / step_size
        slope_tol = tol*max_slope

        for i, energy in enumerate(opt_SCFEnergies):
            prev_energy = opt_SCFEnergies[i-1]
            slope = np.absolute((energy-prev_energy)/float(step_size))
            if slope > slope_tol:
                return False

        return True

    def check_rotor_continuous(self, steps, step_size, parser, tol=0.1):
        """
        A function that will check if a hindered rotor scan is continuous given the following:
        - steps (int): the number of steps performed in the scan (often 36)
        - step_size (float): the number of degress between each of the steps (often 10.0)
        - parser (cclib.parser.data.ccData_optdone_bool): the cclib parser that contains all of the info from the hindered rotor scan
        """

        assert isinstance(step_size, float)

        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4, 5]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)
        energy_tol = np.absolute(tol*(max_energy - min_energy))

        checked = [None for angle in range(0, 360)]

        continuous = True

        for step, energy in enumerate(opt_SCFEnergies):
            abs_theta = int(step*step_size)
            theta = abs_theta % 360

            mismatch = False

            if checked[theta] is None:
                checked[theta] = energy

            else:
                checked_energy = checked[theta]

                abs_diff = np.absolute(energy - checked_energy)

                if abs_diff > energy_tol:
                    mismatch = True
                    continuous = False
                    return False

        return continuous

    def check_rotor_lowest_conf(self, parser, tol=0.0207):

        symbol_dict = {
            53: "I",
            35: "Br",
            17: "Cl",
            9:  "F",
            8:  "O",
            7:  "N",
            6:  "C",
            1:  "H",
            }

        energy_index_dict = {parser.scfenergies[i]:i for i,status in enumerate(parser.optstatus) if
                            status in (2,4,5)}

        starting_energy, final_energy = (list(energy_index_dict.keys())[0],list(energy_index_dict.keys())[-1])
        minimum_energy = min(energy_index_dict)

        if abs(starting_energy - final_energy) > 2.0 * tol:
            logging.info("Rotor scan failed since starting energy is not within tolerance of final energy")
            assert False

        if abs(minimum_energy - min(starting_energy, final_energy)) > tol:
            logging.info("A lower energy conformer was found during rotor scan")
            min_energy_index = energy_index_dict[minimum_energy]
            atomnos = parser.atomnos
            atomcoords = parser.atomcoords[min_energy_index]
            atoms = []
            for atom_num, coords in zip(atomnos, atomcoords):
                atoms.append(Atom(symbol=symbol_dict[atom_num], position=coords))
            atoms = Atoms(atoms)
            # atoms = read_log(file_name)
            conformer = Conformer(smiles=self.rmg_mol.smiles)
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            starting_molecule = RMGMolecule(smiles=conformer.smiles)
            starting_molecule = starting_molecule.to_single_bonds()
            test_molecule = RMGMolecule()
            test_molecule.from_xyz(
                atoms.arrays["numbers"],
                atoms.arrays["positions"]
                )
            if not starting_molecule.is_isomorphic(test_molecule):
                logging.info(
                    "Output geometry of {} is not isomorphic with input geometry".format(log_path))
                assert False
            return (False, atoms)

        return (True, None)


        # opt_indices = [i for i, status in enumerate(
        #     parser.optstatus) if status in (2,4,5)]
        # opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        # max_energy,min_energy = (max(opt_SCFEnergies),min(opt_SCFEnergies))
        # min_energy = min(opt_SCFEnergies)
        # energy_tol = tol*(max_energy - min_energy)

        # first_is_lowest = True  # Therefore...
        # min_idx = 0
        # min_energy = opt_SCFEnergies[min_idx]

        # for i, energy in enumerate(opt_SCFEnergies):
        #     if min_energy - energy > energy_tol:
        #         min_energy = energy
        #         min_idx = i

        # if min_idx != 0:
        #     logging.info("We found a lower energy conformer during rotor scan")
        #     first_is_lowest = False

        # min_opt_idx = opt_indices[min_idx]

        # atomnos = parser.atomnos
        # atomcoords = parser.atomcoords[min_opt_idx]

        # return [first_is_lowest, min_energy, atomnos, atomcoords]

################## rotor methods #############################################

    def calculate_species(self, 
                          options = {
                            "optimize" : True,
                            "rotors" : True,
                            "run_sp" : True,
                            "recalculate" : False,
                            "calculate_fod" : False,
                            "delta" : float(120),
                            "vary_multiplicity" : False,
                            "rmsd_cutoff" : 0.1,
                            "energy_cutoff" : 20,
                            "max_conformers" : None,
                            "run_arkane_dft" : False,
                            "run_arkane_sp": True,
                            "use_atom_corrections": True,
                            "use_bond_corrections": True,
                            "use_isodesmic_reactions": False,
                            "dir_path": None}
                          ):
        """
        Calculates the energy and harmonic frequencies of the lowest energy conformer of a species:
        1) Systematically generates low energy conformers for a given species with an ASE calculator.
        2) Optimizes each low energy conformer with provided Gaussian AutoTST calculator.
        3) Saves the gaussian optimization and frequency analysis log file for the lowest energy conformer of the species.
        """
        species = self.species
        method = self.calculator.settings['method'].upper()
        basis_set = self.calculator.settings['basis'].upper()
        method_name = self.method_name
        smiles = self.species.smiles[0]

        if options["dir_path"]:
            dest2 = os.path.join(options["dir_path"],self.method_name)
            if not os.path.exists(dest2):
                os.makedirs(dest2)
        else:
            dest2 = None
        
        label = "{}_{}_optfreq".format(smiles,self.method_name)
        log_path = os.path.join(self.calculator.directory,
                                "species", method_name, smiles, label+".log")
        ref_conformer = self.species.conformers[smiles][0]

        if options["optimize"]:
            sp_dir = os.path.join(self.calculator.directory,"species",method_name,smiles,'sp')
            if not os.path.exists(log_path):
                got_one = False
            if os.path.exists(log_path) and not options["recalculate"]:
                logging.info('It appears we already calculated this species')
                logging.info('Checking to see if the log is complete and converge...')
                complete, converged = self.calculator.verify_output_file(log_path)
                
                if (complete and converged):
                    logging.info('creating a sample conformer for isomorphism test...')
                    conf = Conformer(smiles=smiles)
                    if check_isomorphic(conformer=conf, log_path=log_path):
                        got_one = True
                        logging.info('The existing log has been verified')
                    else:
                        got_one = False
                        logging.info('removing existing log and restarting calculation...')
                        os.remove(log_path)
                        if os.path.exists(sp_dir):
                            rmtree(sp_dir)
                    
                else:
                    got_one = False
                    logging.info('the existing log did not complete or converge')
                    logging.info('removing existing log and restarting calculation...')
                    os.remove(log_path)
                    if os.path.exists(sp_dir):
                        rmtree(sp_dir)

            if (options["recalculate"] is False) and (got_one is True):
                logging.info("It appears we have already optimized {}".format(species))
            else:
                logging.info("Calculating geometries for {}".format(species))

                if self.conformer_calculator:
                    species.generate_conformers(
                        ase_calculator=self.conformer_calculator,
                        delta = options['delta'],
                        rmsd_cutoff = options['rmsd_cutoff'],
                        energy_cutoff = options['energy_cutoff'],
                        max_conformers = options["max_conformers"], 
                        multiplicity = options["vary_multiplicity"])

                currently_running = []
                processes = {}
                
                for conformer in species.conformers[smiles]:
                    process = Process(target=self.calculate_conformer, args=
                        (conformer,))
                    processes[process.name] = process

                for name, process in list(processes.items()):
                    process.start()
                    currently_running.append(name)
                    time.sleep(5)

                while len(currently_running) > 0:
                    for name, process in list(processes.items()):
                        if not (name in currently_running):
                            continue
                        if not process.is_alive():
                            currently_running.remove(name)
                    time.sleep(15)

                results = []

                for conformer in list(species.conformers[smiles]):
                    scratch_dir = os.path.join(
                        self.directory,
                        "species",
                        method_name,
                        conformer.smiles,
                        "conformers"
                    )
                    f = "{}_{}_{}_optfreq.log".format(conformer.smiles, conformer.index, self.method_name)
                    path = os.path.join(scratch_dir, f)
                    if not os.path.exists(path):
                        logging.info(
                            "It seems that {} was never run...".format(f))
                        continue
                    try:
                        atoms = read_log(path)
                        conformer._ase_molecule = atoms
                        conformer.update_coords_from("ase")
                        complete, converged = self.calculator.verify_output_file(path)
                        if not all([complete, converged]): 
                            logging.info("It appears {} is incomplete or did not converge".format(f))
                            continue
                        parser = ccread(path, loglevel=logging.ERROR)
                        if not check_isomorphic(conformer=conformer,log_path=path):
                            logging.info("{}_{} is not isomorphic with starting species".format(conformer.smiles, conformer.index))
                            continue
                        if parser is None:
                            logging.info(
                                "Something went wrong when reading in results for {} using cclib...".format(f))
                            continue
                        energy = parser.scfenergies[-1]
                    except:
                        logging.info(
                            "The parser does not have an scf energies attribute, we are not considering {}".format(f))
                        continue

                    results.append([energy, conformer, f])

                results = pd.DataFrame(
                    results, columns=["energy", "conformer", "file"]).sort_values("energy").reset_index()

                if results.shape[0] == 0:
                    logging.info(
                        "No conformer for {} was successfully calculated... :(".format(species))
                    return False
                
                conformer = results['conformer'][0]
                lowest_energy_file = results['file'][0]

                # for index in range(results.shape[0]):
                #     conformer = results.conformer[index]
                #     lowest_energy_file = results.file[index]
                #     break

                logging.info(
                    "The lowest energy conformer is {}".format(lowest_energy_file))

                lowest_energy_file_path = os.path.join(self.calculator.directory, "species",method_name, conformer.smiles,"conformers",lowest_energy_file)
                label =  "{}_{}_optfreq".format(conformer.smiles,self.method_name)
                dest = os.path.join(self.calculator.directory,"species",method_name,conformer.smiles,label+".log")

                try:
                    copyfile(lowest_energy_file_path,dest)
                except IOError:
                    os.makedirs(os.path.dirname(dest))
                    copyfile(lowest_energy_file_path,dest)

                logging.info("The lowest energy file is {}! :)".format(
                    lowest_energy_file))

                # parser = ccread(dest, loglevel=logging.ERROR)

                
                # xyzpath = os.path.join(self.calculator.directory,"species",method_name,conformer.smiles,label+".xyz")
                # parser.writexyz(xyzpath)

                # logging.info("The lowest energy xyz file is {}!".format(
                #     xyzpath))

        if len(self.species.smiles) > 1 and os.path.exists(log_path):
            # Determine "best" Lewis structure from NBO calcuation
            logging.info("There are multiple resonance structures for {}".format(self.species))
            # Check for existing nbo log
            nbo_dir = os.path.join(self.directory,"species",method_name,smiles,"nbo")
            nbo_log = os.path.join(nbo_dir,smiles+'_nbo.log')

            if os.path.exists(nbo_log):
                logging.info("NBO has already been calculated")
                try:
                    logging.info("Attempting to determine Lewis structure from NBO log")
                    mol = self.calculator.read_nbo_log(nbo_log, nbo_dir)
                except:
                    logging.info(
                        "Could not determing Lewis Structure from NBO calculation")
                    logging.info("Trying HCLI to determing best Lewis Structure")
                    try:
                        spcs = RMGSpecies().from_smiles(smiles)
                        spcs.generate_resonance_structures(
                            keep_isomorphic=False)
                        hlci = HLCI(spcs)
                        index = hlci.w.index(max(hlci.w))
                        mol = HLCI(spcs).species.molecule[index]
                    except:
                        mol = self.species.rmg_species[0]
                        logging.info(
                            "Could not determine best Lewis struture for species {}...using {} for structure".format(self.species,mol.smiles))
    
                logging.info("the best smiles for {} is {}".format(
                    self.species, mol.smiles))
                best_smiles = mol.smiles
                self.rmg_mol = mol

            else:
                logging.info(
                    "Performing NBO calculation to determine best Lewis structure for {}".format(self.species))
                atoms = read_log(log_path)
                ref_conformer._ase_molecule = atoms
                ref_conformer.update_coords_from("ase")
                self.calculator.conformer = ref_conformer
                calc = self.calculator.get_nbo_calc()
                label = calc.label
                nbo_path = os.path.join(calc.scratch, calc.label + ".log")
                logging.info(
                    "Submitting conformer calculation for {}".format(calc.label))
                label = self.submit(ref_conformer, calc)
                time.sleep(15)
                while not self.check_complete(label):
                    time.sleep(120)

                complete, converged = self.calculator.verify_output_file(log_path)

                try:
                    logging.info(
                        "Attempting to determine Lewis structure from NBO log")
                    mol = self.calculator.read_nbo_log(nbo_log, nbo_dir)
                except:
                    logging.info(
                        "Could not determing Lewis Structure from NBO calculation")
                    logging.info(
                        "Trying HCLI to determing best Lewis Structure")
                    try:
                        spcs = RMGSpecies().from_smiles(smiles)
                        spcs.generate_resonance_structures(
                            keep_isomorphic=False)
                        hlci = HLCI(spcs)
                        index = hlci.w.index(max(hlci.w))
                        mol = HLCI(spcs).species.molecule[index]
                    except:
                        mol = self.species.rmg_species[0]
                        logging.info(
                            "Could not determine best Lewis struture for species {}...using {} for structure".format(self.species, mol.smiles))

                logging.info("the best smiles for {} is {}".format(
                    self.species, mol.smiles))
                best_smiles = mol.smiles
                self.rmg_mol = mol
        else:
            best_smiles = smiles
            self.rmg_mol =  self.species.rmg_species[0]
                

        if options["calculate_fod"]:  # We will run an orca FOD job
            
            method_name = self.method_name
            # Update the lowest energy conformer 
            # with the lowest energy logfile
            label =  "{}_{}".format(smiles,method_name)
            conformer = Conformer(smiles=smiles)
            log = os.path.join(self.calculator.directory,"species",method_name,conformer.smiles,label+"_optfreq.log")
            assert os.path.exists(log),"It appears the calculation failed for {}...cannot calculate fod".format(conformer.smiles)
            atoms = read_log(log)
            mult = ccread(log,loglevel=logging.ERROR).mult
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            conformer.rmg_molecule.multiplicity = mult
            self._calculate_fod(conformer=conformer,method_name=method_name)
            if dest2:
                fod_path = os.path.join(
                    self.directory,
                    "species",
                    method_name,
                    smiles,
                    smiles + '_fod.log'
                    )
                copyfile(fod_path,os.path.join(dest2,smiles + '_fod.log'))


        if options['run_arkane_dft']:
            ##### run Arkane
            logging.info("running arkane for {} with {} method".format(smiles,method_name))
            arkane_dir = os.path.join(
                self.directory,
                "species",
                method_name,
                smiles,
                'arkane'
            )
            if not os.path.exists(arkane_dir):
                os.makedirs(arkane_dir)

            label =  "{}_optfreq".format(smiles)
            log_path = os.path.join(self.directory,"species",method_name,smiles,label+".log")
            assert os.path.exists(log_path)
            mult = ccread(log_path,loglevel=logging.ERROR).mult
            copyfile(log_path,os.path.join(arkane_dir,label + ".log"))
            molecule = self.rmg_mol
            # molecule = self.species.rmg_species[i]
            # if molecule.to_smiles() != smiles:
            #     for mol in self.species.rmg_species:
            #         if mol.to_smiles() == smiles:
            #             molecule = mol
            #             break
            molecule.multiplicity = mult
            arkane_calc = Arkane_Input(molecule=molecule,modelChemistry=method_name,directory=arkane_dir,gaussian_log_path=log_path)
            arkane_calc.write_molecule_file()
            arkane_calc.write_arkane_input(
                useAtomCorrections=options["use_atom_corrections"],useBondCorrections=options["use_bond_corrections"],
                useIsodesmicReactions=options["use_isodesmic_reactions"])
            yml_file = os.path.join(arkane_dir,'species','1.yml')
            if os.path.exists(yml_file):
                logging.info("It appears the arkane job has already been run")
            else:
                subprocess.Popen(
                    """python $RMGpy/Arkane.py arkane_input.py""", 
                    shell=True, cwd=arkane_calc.directory)
                while not os.path.exists(yml_file):
                    time.sleep(120)
            time.sleep(5)
            os.remove(os.path.join(arkane_dir,label + ".log"))
            dest = os.path.join(
                self.directory,
                "species",
                method_name,
                smiles,
                best_smiles + '.yml'
            )

            if os.path.exists(yml_file):
                arkane_out = os.path.join(arkane_dir,'output.py')
                arkane_supporting = os.path.join(arkane_dir,'supporting_information.csv')
                copyfile(yml_file,dest)
                if dest2:
                    copyfile(arkane_out,os.path.join(dest2,best_smiles + '_arkaneOutput.py'))
                    try:
                        copyfile(arkane_supporting,os.path.join(dest2,best_smiles + '_arkaneSupporting.csv'))
                        copyfile(yml_file,os.path.join(dest2,best_smiles + '.yml'))
                    except:
                        pass
                    #copyfile(log_path,os.path.join(dest2,label + '.log'))
                logging.info('Arkane job completed successfully!')

            else:
                logging.info('It appears the arkane job failed or was never run for {}'.format(smiles))

        if options["run_sp"]:
            
            label =  "{}_{}".format(smiles,self.method_name)
            conformer = Conformer(smiles=smiles)
            freq_log = os.path.join(self.directory,"species",method_name,conformer.smiles,"sp",conformer.smiles+"_B3LYP_freq.log")
            # if os.path.exists(freq_log):
            #     logging.info("Reading coords from existing freq log for G4 calc")
            #     log = freq_log
            # else:
            log = os.path.join(self.directory,"species",method_name,conformer.smiles,label + "_optfreq.log")
            assert os.path.exists(log), "It appears the calculation failed for {}...cannot perform single point calculations".format(conformer.smiles)
            complete, converged = self.calculator.verify_output_file(log)
            assert all([complete, converged]), "It appears the log file in incomplete or did not converge"
            atoms = read_log(log)
            mult = ccread(log,loglevel=logging.ERROR).mult
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            conformer.rmg_molecule.multiplicity = mult

            single_point_method = self.calculator.settings["sp"]
            if isinstance(single_point_method,str):
                single_point_methods = [single_point_method]
            else: 
                single_point_methods = single_point_method
            
            sp_dir = os.path.join(self.directory,"species",method_name,conformer.smiles,"sp")
            if not os.path.exists(sp_dir):
                os.makedirs(sp_dir)

            currently_running = []
            processes = {}
            
            for sp_method in single_point_methods:
                process = Process(target=self.calculate_sp, args=(conformer,
                    sp_method))
                processes[process.name] = process

            # This loop will block until everything in processes 
            # has been started, and added to currently_running
            for name, process in list(processes.items()):
                process.start()
                currently_running.append(name)

            # This loop will block until everything in currently_running
            # has finished.
            while len(currently_running) > 0:
                for name, process in list(processes.items()):
                    if not (name in currently_running):
                        continue
                    if not process.is_alive():
                        currently_running.remove(name)
                time.sleep(15)
        
            if 'G4' in single_point_methods:
                label = smiles + '_' + 'G4'
                log_path = os.path.join(sp_dir,label + '.log')
                complete, converged = self.calculator.verify_output_file(log_path)
                if not all([complete,converged]):
                    logging.info("It seems the log file {} is incomplete or didnt converge".format(log_path))
                    assert False                
                conformer = Conformer(smiles=self.rmg_mol.smiles)
                conformer.smiles = smiles
                assert check_isomorphic(conformer,log_path)
                conformer.rmg_molecule = self.rmg_mol
                atoms = read_log(log_path)
                mult = ccread(log_path, loglevel=logging.ERROR).mult
                conformer._ase_molecule = atoms
                conformer.update_coords_from("ase")
                conformer.rmg_molecule.multiplicity = mult
                self.calculator.conformer = conformer
                self.calculator.settings["method"] = "B3LYP"
                self.calculator.settings["basis"] = "6-31G(2df,p)"
                self.calculator.settings["dispersion"] = None
                calc = self.calculator.get_freq_calc()
                label = self.submit(conformer,calc)
                time.sleep(15)
                while not self.check_complete(label):
                    time.sleep(60)

        if options['rotors']:

            single_point_method = self.calculator.settings["sp"]
                                            
            label = smiles + '_' + 'G4'
            sp_dir = os.path.join(self.directory,"species",method_name,smiles,"sp")
            log_path = os.path.join(sp_dir,label + '.log')
            complete, converged = self.calculator.verify_output_file(log_path)
            if not all([complete,converged]):
                logging.info("It seems the log file {} is incomplete or didnt converge".format(log_path))
                assert False
            conformer = Conformer(smiles=self.rmg_mol.smiles)
            conformer.smiles = smiles
            assert check_isomorphic(conformer,log_path)
            conformer.rmg_molecule = self.rmg_mol
            atoms = read_log(log_path)
            mult = ccread(log_path, loglevel=logging.ERROR).mult
            conformer._ase_molecule = atoms
            conformer.update_coords_from("ase")
            conformer.rmg_molecule.multiplicity = mult
            self.torsion_conformer = conformer.copy()
            self.calculator.conformer = conformer
            self.calculate_rotors(
                conformer, steps=36, step_size=10.0)

        if options['run_arkane_sp']:

            single_point_method = self.calculator.settings["sp"]
            if isinstance(single_point_method,str):
                single_point_methods = [single_point_method]
            else: 
                single_point_methods = single_point_method

            arkane_dir = os.path.join(
            self.directory,
            "species",
            method_name,
            smiles,
            "sp",
            'ARKANE_NEW_G40'
            )

            if single_point_method == 'orca':
                arkane_dir = os.path.join(
                    self.directory,
                    "species",
                    method_name,
                    smiles,
                    "sp",
                    'ARKANE_ORCA'
                )

            if not os.path.exists(arkane_dir):
                os.makedirs(arkane_dir)

            for sp_method in single_point_methods:
                
                label = smiles + '_' + sp_method
                freq_label = smiles + '_' + 'B3LYP' + '_freq' 
                sp_dir = os.path.join(self.directory,"species",method_name,smiles,"sp")
                log_path = os.path.join(sp_dir,label + '.log')
                freq_path = os.path.join(sp_dir,freq_label + '.log')

                if sp_method == 'orca':
                    orca_calc = Orca()
                    G4_path = os.path.join(sp_dir,smiles + '_G4' + '.log')
                    lines = open(os.path.join(sp_dir,"ccsdt_dz_property.txt"),'r').readlines()
                    prop=False
                    for l in lines: 
                        #if 'MDCI_Corr_EN' in l: 
                        if 'MDCI_Total_EN' in l:
                            prop = True 
                        if prop is True and 'Value' in l: 
                            energy = float(l.split()[-1].split('\n')[0]) 
                            break 
                    # sp_energy = orca_calc.read_energy(log_path) + get_HF_ZPE(G4_path)
                    logging.info(energy)
                    #sp_energy = get_HF_ZPE(G4_path) + energy
                    sp_energy = energy
                else:
                    sp_energy = None
                    complete, converged = self.calculator.verify_output_file(log_path)
                    if not all([complete,converged]):
                        logging.info("It seems the log file {} is incomplete or didnt converge".format(log_path))
                        continue
                complete, converged = self.calculator.verify_output_file(freq_path)
                if not all([complete,converged]):
                    logging.info("It seems the log file {} is incomplete or didnt converge".format(freq_path))
                    continue

                if self.torsion_conformer is not None:
                    conf = self.torsion_conformer
                    assert check_isomorphic(conf,log_path)
                else:
                    conf = Conformer(smiles=self.rmg_mol.smiles)
                    assert check_isomorphic(conf,log_path)
                    dft_label =  "{}_{}_optfreq".format(smiles,self.method_name)
                    dft_log = os.path.join(self.directory,"species",method_name,smiles,dft_label+".log")
                    mult = ccread(dft_log,loglevel=logging.ERROR).mult
                    molecule = self.rmg_mol
                    molecule.multiplicity = mult
                
                copyfile(log_path,
                os.path.join(arkane_dir,label+'.log'))
                copyfile(freq_path,
                os.path.join(arkane_dir,freq_label+'.log'))
                model_chem = sp_method
                if sp_method == 'orca':
                    model_chem = 'orca_ccsd(t)-f12/cc-pvdz-f12'
                if options['rotors'] is True and len(conf.torsions) > 0:
                    if not os.path.exists(os.path.join(arkane_dir,'rotors')):
                        copytree(os.path.join(
                        self.directory, 'species', self.method_name, smiles, 'rotors'), os.path.join(arkane_dir,'rotors'))
                    arkane_calc = Arkane_Input(conformer=conf, modelChemistry=model_chem, directory=arkane_dir, energy=sp_energy,
                energy_log_path=log_path, geometry_log_path=freq_path, frequencies_log_path=freq_path, rotors_dir=os.path.join(arkane_dir,'rotors'))
                    arkane_calc.write_arkane_input(useAtomCorrections=options["use_atom_corrections"],
                                                   useBondCorrections=options["use_bond_corrections"], useIsodesmicReactions=options["use_isodesmic_reactions"],
                                                   useHinderedRotors=True)
                else:
                    arkane_calc = Arkane_Input(conformer=conf, modelChemistry=model_chem, directory=arkane_dir, energy=sp_energy,
                                               energy_log_path=log_path, geometry_log_path=freq_path, frequencies_log_path=freq_path,)
                    arkane_calc.write_arkane_input(useAtomCorrections=options["use_atom_corrections"],
                                                   useBondCorrections=options["use_bond_corrections"], useIsodesmicReactions=options["use_isodesmic_reactions"]
                                                    )

                # if 'G4' in sp_method:
                #     #arkane_calc.write_arkane_input(frequency_scale_factor=0.9854,useIsodesmicReactions=False,n_reactions_max=50)
                #     arkane_calc.write_arkane_input(frequency_scale_factor=0.9854,useAtomCorrections=options["use_atom_corrections"], 
                #     useBondCorrections=options["use_bond_corrections"],useIsodesmicReactions=options["use_isodesmic_reactions"])
                # else:
                #     #arkane_calc.write_arkane_input(useIsodesmicReactions=True,n_reactions_max=50)
                #     arkane_calc.write_arkane_input(
                #         useAtomCorrections=options["use_atom_corrections"], useBondCorrections=options["use_bond_corrections"],
                #         useIsodesmicReactions=options["use_isodesmic_reactions"])
                
                yml_file = os.path.join(arkane_dir,'species','1.yml')
                
                # if os.path.exists(yml_file):
                #     logging.info("It appears the arkane job has already been run...not running again")
                # else:

                logging.info("starting arkane calc for {}".format(label))
                subprocess.run(
                    """python $RMGpy/Arkane.py arkane_input.py""", 
                    shell=True, cwd=arkane_calc.directory)
                # while not os.path.exists(yml_file):
                #     time.sleep(10)
                time.sleep(5)
                os.remove(os.path.join(arkane_dir,label + ".log"))
                if os.path.exists(os.path.join(arkane_dir,'rotors')):
                    rmtree(os.path.join(arkane_dir,'rotors'))
                arkane_out = os.path.join(arkane_dir,'output.py')
                arkane_supporting = os.path.join(arkane_dir,'supporting_information.csv')

                arkane_log_lines = open(os.path.join(arkane_dir,'arkane.log'),'r').readlines()
                energy_differences = []
                for line in arkane_log_lines:
                    if "different in energy from the lowest energy conformer" in line:
                        logging.warning(line)
                        energy_differences.append(float(line.split('kJ')[0].split()[-1]))
                
                if len(energy_differences) > 0:
                    if max(energy_differences) > 2.0:
                        assert False

                if options['dir_path']:
                    dest = os.path.join(options['dir_path'],sp_method)

                if not os.path.exists(dest):
                    os.makedirs(dest)

                if os.path.exists(yml_file):
                    logging.info('Arkane job completed successfully!')
                    yml_dest = os.path.join(dest, best_smiles + '.yml')
                    copy = True
                    if os.path.exists(yml_dest):
                        with open(yml_dest, 'r') as f:
                            data = yaml.safe_load(f)
                            f.close()
                        H298_existing = float(data['thermo_data']['H298']['value'])
                        with open(yml_file, 'r') as f:
                            data = yaml.safe_load(f)
                            f.close()
                        H298 = float(data['thermo_data']['H298']['value'])
                        if H298_existing < H298:
                            copy = False
                            logging.info("{} already exists and has lower enthalpy, not copying to {}".format(
                                yml_dest, dest))
                    
                    if copy is True:
                        copyfile(yml_file,yml_dest)
                        try:
                            copyfile(arkane_out,os.path.join(dest,best_smiles + '_arkaneOutput.py'))
                            copyfile(arkane_supporting,os.path.join(dest,best_smiles + '_arkaneSupporting.csv'))
                        except:
                            pass
                else:
                    logging.info('It appears the arkane job failed or was never run for {}'.format(smiles))
                    continue
