from autotst.calculator.gaussian import Gaussian
from autotst.calculator.orca import Orca
from autotst.calculator.vibrational_analysis import VibrationalAnalysis, percent_change
from autotst.calculator.statmech import StatMech
from autotst.reaction import Reaction, TS
from autotst.species import Species, Conformer
from autotst.geometry import Bond, Angle, Torsion, CisTrans, ChiralCenter
from cclib.io import ccread
import cclib
from rmgpy.molecule import Molecule as RMGMolecule
from rmgpy.species import Species as RMGSpecies
from rmgpy.reaction import Reaction as RMGReaction, ReactionError
from rmgpy.kinetics import PDepArrhenius, PDepKineticsModel
from rmgpy.data.rmg import RMGDatabase
import rmgpy
from ase.calculators.gaussian import Gaussian as ASEGaussian
from ase.atoms import Atom, Atoms
import ase
import rdkit.Chem.rdDistGeom
import rdkit.DistanceGeometry
from rdkit.Chem.Pharm3D import EmbedLib
from rdkit.Chem import AllChem
from rdkit import Chem
import rdkit
import os
import time
import yaml
from shutil import move, copyfile
import numpy as np
import pandas as pd
import subprocess
import multiprocessing
from multiprocessing import Process, Manager
import logging
FORMAT = "%(filename)s:%(lineno)d %(funcName)s %(levelname)s %(message)s"
logging.basicConfig(format=FORMAT, level=logging.INFO)


class Job():
    """
    A class to deal with the input and output of calculations
    """

    def __init__(
            self,
            species=None,
            reactions=None,
            load_species_from_reactions = False,
            calculator=None, # An AutoTST Gaussian calculator with proper directory settings
            conformer_calculator = None, # an ASE Calculator object
            partition="general", # The partition to run calculations on
            directory = None, # where to save your files 
            scratch = None # a directory for temporary files generated by calculators
            ):

        
        if species is not None:
            if isinstance(species,list):
                for s in species:
                    assert isinstance(s,Species),"species {} provided was not an AutoTST species object".format(s)
                self.species = species # sets self.species to list of AutoTST species
            elif isinstance(species,Species):
                self.species = [species] # sets self.species to list of a single AutoTST species 
            else:
                assert False, "Species must be an AutoTST species or a list or AutoTST species" 
        else:
            self.species = None

        if reactions is not None:
            if isinstance(reactions,list):
                for r in reactions:
                    assert isinstance(r,Reaction),"reaction {} provided was not an AutoTST reaction object".format(r)
                self.reactions = reactions # sets self.reactions to list of AutoTST reactions
                self.label = [reaction.label for reaction in self.reactions]
            elif isinstance(reactions,Reaction):
                self.reactions = [reactions] # sets self.reactions to list of a single AutoTST reaction 
                self.label = reactions.label
            else:
                assert False, "Reactions must be an AutoTST reaction of list of AutoTST reactions"
        else:
            self.reactions = None
            self.label = None

        if load_species_from_reactions is True:
            reaction_species = self.get_species_from_reactions()
            if self.species is None:
                self.species = reaction_species
            else:
                species = self.species
                for s in reaction_species:
                    if s not in species:
                        species.append(s)
                self.species = species

        self.calculator = calculator
        if self.calculator:
            if directory is None:
                logging.info("Job directory not specified...setting Job directory to calculator directory")
                self.directory = self.calculator.directory
            else:
                logging.info("Setting calculator directory to Job directory")
                self.directory = self.calculator.directory = directory
            if scratch is None:
                logging.info("Job scratch directory not specified...setting Job scratch to calculator scratch")
                self.scratch = self.calculator.scratch
            else:
                logging.info("Setting calculator scratch to Job scratch")
                self.scratch = self.calculator.scratch = scratch
        else:
            logging.info("No calculator specified")
            if directory is None:
                logging.info("No directory specified...setting directory to .")
                self.directory = '.'
            else:
                self.directory = directory
            if scratch is None:
                logging.info("No scratch directory specified...setting scratch to .")
                self.scratch = '.'
            else:
                self.scratch = scratch
        
        self.conformer_calculator = conformer_calculator
        if self.conformer_calculator:
            self.conformer_calculator.directory = self.scratch
            
        self.partition = partition

        manager = multiprocessing.Manager()
        global global_results
        global_results = manager.dict()

        if self.scratch and not os.path.exists(self.scratch):
            os.makedirs(self.scratch)
        elif self.directory and not os.path.exists(self.directory):
            os.makedirs(self.directory)

    def __repr__(self):
        return "< Job '{}'>".format(self.label)

    def get_species_from_reactions(self):
        assert self.reactions is not None,"reactions is empty"
        species = []
        for reaction in self.reactions:
            r, p = reaction.label.split("_")
            for react in r.split("+"):
                mol = Species(smiles=[react])
                if mol not in species:
                    species.append(mol)
            for prod in p.split("+"):
                mol = Species(smiles=[prod])
                if mol not in species:
                    species.append(mol)
        return species

    def read_log(self, file_path=None):
        """
        A helper method that allows one to easily parse log files
        """
        symbol_dict = {
            35: "Br",
            17: "Cl",
            9:  "F",
            8:  "O",
            7:  "N",
            6:  "C",
            1:  "H",
        }
        atoms = []

        parser = ccread(file_path, loglevel=logging.ERROR)

        for atom_num, coords in zip(parser.atomnos, parser.atomcoords[-1]):
            atoms.append(Atom(symbol=symbol_dict[atom_num], position=coords))

        return Atoms(atoms)

    def write_input(self, conformer, ase_calculator):
        """
        A helper method that will write an input file and move it to the correct scratch directory
        """

        ase_calculator.write_input(conformer.ase_molecule)
        try:
            os.makedirs(ase_calculator.scratch)
        except OSError:
            pass

        move(
            ase_calculator.label + ".com",
            os.path.join(
                ase_calculator.scratch,
                ase_calculator.label + ".com"
            ))

        move(
            ase_calculator.label + ".ase",
            os.path.join(
                ase_calculator.scratch,
                ase_calculator.label + ".ase"
            ))

    def check_complete(self, label):
        """
        A method to determine if a job is still running
        """
        command = """squeue -n "{}" """.format(label)
        output = subprocess.Popen(
            command,
            shell=True,
            stdout=subprocess.PIPE).communicate()[0]
        
        if len(output.split("\n")) <= 2:
            return True
        else:
            return False

#################################################################################

    def submit_conformer(self, conformer, restart=False):
        """
        A methods to submit a job based on the calculator and partition provided
        """
        assert conformer, "Please provide a conformer to submit a job"

        self.calculator.conformer = conformer
        ase_calculator = self.calculator.get_conformer_calc()
        self.write_input(conformer, ase_calculator)

        label = conformer.smiles + "_{}".format(conformer.index)
        file_path = os.path.join(ase_calculator.scratch, label)

        os.environ["COMMAND"] = self.calculator.command  # only using gaussian for now
        os.environ["FILE_PATH"] = file_path
        
        attempted = False
        if os.path.exists(file_path + ".log"):
            attempted = True
            if not restart:
                logging.info(
                    "It appears that this job has already been run, not running it a second time.")

        if restart or not attempted:
            if restart:
                logging.info(
                    "Restarting calculations for {}.".format(conformer)
                )
            else:
                logging.info("Starting calculations for {}".format(conformer))
            subprocess.call(
                """sbatch --exclude=c5003,c3040 --job-name="{0}" --output="{0}.slurm.log" --error="{0}.slurm.log" -p {1} -N 1 -n 20 -t 12:00:00 --mem=60GB $AUTOTST/autotst/job/submit.sh""".format(
                    label, self.partition), shell=True)

        return label

    def calculate_conformer(self, conformer):
        """
        A method that optimizes a conformer and performs frequency analysis.
        If the conformer does not convergenge with tight convergence criteria,
        the convergence criteria is loosened to Gaussian's default criteria,
        and the optimization is rerun using the geometry from the last step of the Tight convergence optimization.
        Returns True if Gaussian log is complete and converged, and False if incomplete of unconverged.
        """

        self.calculator.conformer = conformer # this might be dangerous if running several of these at once?
        self.calculator.convergence = "Tight"
        calc = self.calculator.get_conformer_calc()
        scratch_dir = os.path.join(
            self.calculator.directory,
            "species",
            conformer.smiles,
            "conformers")
        f = calc.label + ".log"

        logging.info(
            "Submitting conformer calculation for {}".format(calc.label))
        label = self.submit_conformer(conformer)
        while not self.check_complete(label):
            time.sleep(15)

        complete, converged = self.calculator.verify_output_file(os.path.join(scratch_dir, f))

        if not complete:
            logging.info(
                "It seems that the file never completed for {} completed, running it again".format(calc.label))
            label = self.submit_conformer(conformer, restart=True)
            while not self.check_complete(label):
                time.sleep(15)

            complete, converged = self.calculator.verify_output_file(os.path.join(scratch_dir, f))

        #####

        def check_isomorphic(conformer):
            """
            Compares whatever is in the log file 'f' 
            to the SMILES of the passed in 'conformer'
            """
            starting_molecule = RMGMolecule(SMILES=conformer.smiles)
            starting_molecule = starting_molecule.toSingleBonds()

            atoms = self.read_log(
                os.path.join(scratch_dir, f)
            )

            test_molecule = RMGMolecule()
            test_molecule.fromXYZ(
                atoms.arrays["numbers"],
                atoms.arrays["positions"]
            )
            if not starting_molecule.isIsomorphic(test_molecule):
                logging.info(
                    "Output geometry of {} is not isomorphic with input geometry".format(calc.label))
                return False
            else:
                logging.info(
                "{} was successful and was validated!".format(calc.label))
                return True

        #####

        if (complete and converged):
            return check_isomorphic(conformer)

        if not complete: # try again
            logging.info(
                "It appears that {} was killed prematurely".format(calc.label))
            label = self.submit_conformer(conformer, restart=True)
            while not self.check_complete(label):
                time.sleep(15)

            complete, converged = self.calculator.verify_output_file(os.path.join(scratch_dir, f))
            if (complete and converged):
                return check_isomorphic(conformer)
            elif not complete:
                logging.info(
                    "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False
            # else complete but not converged

        if not converged:
            logging.info("{} did not converge, trying it as a looser convergence criteria".format(calc.label))

            logging.info("Resubmitting {} with default convergence criteria".format(conformer))
            atoms = self.read_log(os.path.join(scratch_dir, f))
            conformer.ase_molecule = atoms
            conformer.update_coords_from("ase")
            self.calculator.conformer = conformer # again, be careful setting this in multiple processes?
            self.calculator.convergence = ""
            calc = self.calculator.get_conformer_calc()

            logging.info("Removing the old log file that didn't converge, restarting from last geometry")
            os.remove(os.path.join(scratch_dir, f))

            label = self.submit_conformer(conformer)
            while not self.check_complete(label):
                time.sleep(15)

            if not os.path.exists(os.path.join(scratch_dir, f)):
                logging.info(
                "It seems that {}'s loose optimization was never run...".format(calc.label))
                return False

            complete, converged = self.calculator.verify_output_file(
                os.path.join(scratch_dir, f)
            )

            if not complete:
                logging.info(
                "It appears that {} was killed prematurely or never completed :(".format(calc.label))
                return False

            elif not converged:
                logging.info("{} failed second QM optimization :(".format(calc.label))
                return False

            else:
                return check_isomorphic(conformer)

        raise Exception("Shoudn't reach here")

    def calculate_fod(self,conformer):
        """
        Runs finite temperaure DFT to determine the Fractional Occupation number weighted Density (FOD number).
        Uses Orca's the default functional, basis set, and smear temperature (TPSS, def2-TZVP, 5000 K).
        """
        # specify a directory for FOD input and output
        if isinstance(conformer,TS):
            fod_dir = os.path.join(self.directory, "ts",
                                   conformer.reaction_label, "fod")
            dir = os.path.join(self.directory, "ts",
                               conformer.reaction_label)
            label = conformer.reaction_label + "_fod"
        else:
            fod_dir = os.path.join(self.directory, "species", conformer.smiles, "fod")
            dir = os.path.join(self.directory, "species",
                               conformer.smiles)
            label = conformer.smiles + "_fod"

        if not os.path.exists(fod_dir):
            os.makedirs(fod_dir)

        # Get orca calculator instance 
        # for lowest energy conformer
        orca_calc = Orca(conformer=conformer)
        orca_calc.write_fod_input(fod_dir)

        # Assign FOD label for calulation and filepath 
        # to save input and output
        file_path = os.path.join(fod_dir, label)

        # Assign environment variables with orca command and path
        os.environ["COMMAND"] = orca_calc.command
        os.environ["FILE_PATH"] = file_path

        # Do not run orca if log file is already there
        attempted = False
        complete = False
        if os.path.exists(file_path + ".log"):
            attempted = True
            logging.info(
                "It appears that this job has already been run")
            if orca_calc.check_NormalTermination(file_path + ".log"):
                complete = True
                logging.info("The FOD calculation completed! The FOD log file is {}".format(
                    file_path + ".log"))
                copyfile(
                    file_path + ".log", os.path.join(dir, label + ".log"))
                return True
            else:
                logging.info("It appears the FOD job did not terminate normally! Trying FOD job again")
                complete = False

        # In log file does not exist, run Orca
        if not attempted or not complete:
            logging.info(
                "Starting FOD calculation for {}".format(conformer))
            subprocess.call(
                """sbatch --exclude=c5003,c3040 --job-name="{0}" --output="{0}.log" --error="{0}.slurm.log" -p test -N 1 -n 4 -t 01:00:00 --mem=1GB $AUTOTST/autotst/job/orca_submit.sh""".format(
                    label), shell=True)

        # wait unitl the job is done
        while not self.check_complete(label):
            time.sleep(15)

        # If the log file exits, check to see if it terminated normally
        if os.path.exists(file_path + ".log"):
            if orca_calc.check_NormalTermination(file_path + ".log"):
                logging.info("The FOD calculation completed! The FOD log file is {}".format(
                    file_path + ".log"))
                copyfile(
                    file_path + ".log", os.path.join(dir, label + ".log"))
                return True
            else:
                logging.info("It appears the FOD job did not terminate normally! The FOD log file is {}".format(
                    file_path + ".log"))
                return False
        else:
            logging.info("It appears the FOD orca job never ran")
            return False

    def calculate_species(self, calculate_fod=False):
        """
        Calculates the energy and harmonic frequencies of the lowest energy conformer of a species:
        1) Systematically generates low energy conformers for a given species with an ASE calculator.
        2) Optimizes each low energy conformer with provided Gaussian AutoTST calculator.
        3) Saves the gaussian optimization and frequency analysis log file for the lowest energy conformer of the species.
        """

        if self.species is not None:
            for species in self.species:
                assert isinstance(species,Species),"species {} provided was not an AutoTST species object".format(species)
        else:
            raise TypeError("Species cannot be None, please specify an AutoTST species to calculate")
        
        calculation_status = dict()
        for species in self.species:
            logging.info("Calculating geometries for {}".format(species))

            if self.conformer_calculator:
                species.generate_conformers(ase_calculator=self.conformer_calculator)

            currently_running = []
            processes = {}
            for smiles, conformers in list(species.conformers.items()):

                for conformer in conformers:

                    process = Process(target=self.calculate_conformer, args=(
                        conformer,))
                    processes[process.name] = process

            # This loop will block until everything in processes 
            # has been started, and added to currently_running
            for name, process in list(processes.items()):
                while len(currently_running) >= 50:
                    for running in currently_running:
                        if not running.is_alive():
                            currently_running.remove(name)
                    time.sleep(15)
                process.start()
                currently_running.append(name)

            # This loop will block until everything in currently_running
            # has finished.
            while len(currently_running) > 0:
                for name, process in list(processes.items()):
                    if not (name in currently_running):
                        continue
                    if not process.is_alive():
                        currently_running.remove(name)
                time.sleep(15)

            results = []
            for smiles, conformers in list(species.conformers.items()):
                for conformer in conformers:
                    scratch_dir = os.path.join(
                        self.calculator.directory,
                        "species",
                        conformer.smiles,
                        "conformers"
                    )
                    f = "{}_{}.log".format(conformer.smiles, conformer.index)
                    path = os.path.join(scratch_dir, f)
                    if not os.path.exists(path):
                        logging.info(
                            "It seems that {} was never run...".format(f))
                        continue
                    try:
                        parser = ccread(path, loglevel=logging.ERROR)
                        if parser is None:
                            logging.info(
                                "Something went wrong when reading in results for {} using cclib...".format(f))
                            continue
                        energy = parser.scfenergies[-1]
                    except:
                        logging.info(
                            "The parser does not have an scf energies attribute, we are not considering {}".format(f))
                        energy = 1e5

                    results.append([energy, conformer, f])

            results = pd.DataFrame(
                results, columns=["energy", "conformer", "file"]).sort_values("energy").reset_index()

            if results.shape[0] == 0:
                logging.info(
                    "No conformer for {} was successfully calculated... :(".format(species))
                calculation_status[species] = False
                continue

            for index in range(results.shape[0]):
                conformer = results.conformer[index]
                lowest_energy_file = results.file[index]
                break

            logging.info(
                "The lowest energy conformer is {}".format(lowest_energy_file))

            lowest_energy_file_path = os.path.join(self.calculator.directory,"species",conformer.smiles,"conformers",lowest_energy_file)
            dest = os.path.join(self.calculator.directory,"species",conformer.smiles,conformer.smiles+".log")

            try:
                copyfile(lowest_energy_file_path,dest)
            except IOError:
                os.makedirs(os.path.dirname(dest))
                copyfile(lowest_energy_file_path,dest)

            logging.info("The lowest energy file is {}! :)".format(
                lowest_energy_file))
            calculation_status[species] = True

            parser = ccread(dest, loglevel=logging.ERROR)
            xyzpath = os.path.join(self.calculator.directory,"species",conformer.smiles,conformer.smiles+".xyz")
            parser.writexyz(xyzpath)

            logging.info("The lowest energy xyz file is {}! :)".format(
                xyzpath))

            if calculate_fod:  # We will run an orca FOD job

                # Update the lowest energy conformer 
                # with the lowest energy logfile
                atoms = self.read_log(lowest_energy_file_path)
                conformer.ase_molecule = atoms
                conformer.update_coords_from("ase")
                self.calculate_fod(conformer=conformer)

        logging.info(calculation_status)
        if False in calculation_status.values() or len(calculation_status.values()) == 0:
            return False
        else:
            return True
#################################################################################

    def submit_transitionstate(self, transitionstate, opt_type, restart=False):
        """
        A methods to submit a job for a TS object based on a single calculator
        """
        assert transitionstate, "Please provide a transitionstate to submit a job"
        self.calculator.conformer = transitionstate
        if opt_type.lower() == "shell":
            ase_calculator = self.calculator.get_shell_calc()
            time = "12:00:00"
        elif opt_type.lower() == "center":
            ase_calculator = self.calculator.get_center_calc()
            time = "12:00:00"
        elif opt_type.lower() == "overall":
            ase_calculator = self.calculator.get_overall_calc()
            time = "12:00:00"
        elif opt_type.lower() == "irc":
            ase_calculator = self.calculator.get_irc_calc()
            time = "24:00:00"

        self.write_input(transitionstate, ase_calculator)

        label = ase_calculator.label
        scratch = ase_calculator.scratch
        file_path = os.path.join(scratch, label)

        os.environ["COMMAND"] = "g16"  # only using gaussian for now
        os.environ["FILE_PATH"] = file_path

        attempted = False
        if os.path.exists(file_path + ".log"):
            attempted = True
            logging.info("It appears that {} has already been attempted...".format(label))

        if (not attempted) or restart:
            subprocess.call(
                """sbatch --exclude=c5003,c3040 --job-name="{0}" --output="{0}.slurm.log" --error="{0}.slurm.log" -p {1} -N 1 -n 20 --mem=60GB -t {2} $AUTOTST/autotst/job/submit.sh""".format(
                    label, self.partition, time), shell=True)

        return label

    def calculate_transitionstate(self, transitionstate, vibrational_analysis=True):
        """
        A method to perform the partial optimizations for a transitionstate and arrive
        at a final geometry. Returns True if we arrived at a final geometry, returns false
        if there is an error along the way.
        """

        ts_identifier = "{}_{}_{}".format(
            transitionstate.reaction_label, transitionstate.direction, transitionstate.index)

        for opt_type in ["shell", "overall"]:
            self.calculator.conformer = transitionstate

            if opt_type == "overall":
                 file_path = "{}_{}_{}.log".format(transitionstate.reaction_label, transitionstate.direction, transitionstate.index)
            else:
                 file_path = "{}_{}_{}_{}.log".format(transitionstate.reaction_label, transitionstate.direction, opt_type, transitionstate.index)

            file_path = os.path.join(
                self.directory, 
                "ts", 
                transitionstate.reaction_label, 
                "conformers", 
                file_path
            )


            if not os.path.exists(file_path):
                logging.info(
                    "Submitting {} calculations for {}".format(opt_type.upper(),ts_identifier))
                label = self.submit_transitionstate(
                    transitionstate, opt_type=opt_type.lower())
                while not self.check_complete(label):
                    time.sleep(15)

            else:
                logging.info(
                    "It appears that we already have a complete {} log file for {}".format(opt_type.upper(), ts_identifier))

                complete, converged = self.calculator.verify_output_file(file_path)
                
                if not complete:
                    logging.info(
                        "It seems that the {} file never completed for {} never completed, running it again".format(opt_type.upper(), ts_identifier))
                    label = self.submit_transitionstate(
                        transitionstate, opt_type=opt_type.lower(), restart=True)
                    while not self.check_complete(label):
                        time.sleep(15)

            complete, converged = self.calculator.verify_output_file(file_path)

            if not (complete and converged):
                logging.info(
                    "{} failed the {} optimization".format(ts_identifier, opt_type.upper()))
                global_results[ts_identifier] = False
                return False
            logging.info(
                "{} successfully completed the {} optimization!".format(ts_identifier, opt_type.upper()))
            transitionstate.ase_molecule = self.read_log(file_path)
            transitionstate.update_coords_from("ase")

        logging.info(
            "Calculations for {} are complete and resulted in a normal termination!".format(ts_identifier))

        got_one = self.validate_transitionstate(
                transitionstate=transitionstate, vibrational_analysis=vibrational_analysis)
        if got_one:
            global_results[ts_identifier] = True
            return True
        else:
            global_results[ts_identifier] = False
            return False

    def check_irc_folder(self, reaction):
        """
        A method to check irc jobs to try to find an irc validated transition state
        Returns true if a validated ts is found, false otherwise
        """
        got_one = False
        irc_folder = os.path.join(
            self.directory, "ts", reaction.label, 'irc')
        if not os.path.exists(irc_folder):
            logging.info("It appears no irc jobs were run")
            return False
        else:
            irc_logs = [l for l in os.listdir(irc_folder) if l.endswith('.log')]
            for log in irc_logs:
                if 'forward' in log:
                    direction = 'forward'
                else:
                    direction = 'reverse'
                ts = reaction.ts[direction][0]
                ts.index = int(log.split('.log')[0].split('_')[-1])
                label = ts.reaction_label + '_' + direction + '_' + str(ts.index)
                self.calculator.conformer = ts
                result = self.calculator.validate_irc()
                if result:
                    logging.info("{} successfully validated via irc!".format(label))
                    if os.path.exists(self.directory, "ts", reaction.label, "conformers",label+'.log'):
                        got_one=True
                        copyfile(os.path.join(self.directory, "ts", self.reaction.label,"conformers", label +'.log'),
                                os.path.join(self.directory, "ts", self.reaction.label, self.reaction.label + ".log")
                                )
                        logging.info("TS log file validated from irc is {} :)".format(
                        os.path.join(self.directory, "ts",self.reaction.label, self.reaction.label + ".log")))
                        break
                    else:
                        logging.info("We have a TS validated from irc, but no completed log for {}".format(label))
                        logging.info("Checking the other irc logs...")
                        continue
                else:
                    logging.info(
                        "Could not validate {} from irc".format(label))
                    continue
            if got_one:
                return True
            else:
                logging.info(
                    "All of the ircs failed for {}".format(reaction.label))
                return False
                

    def calculate_reaction(self, recalculate=False, vibrational_analysis=True, calculate_fod=False):
        """
        A method to run calculations for all tranitionstates for a reaction
        """

        calculation_status = dict()
        for reaction in self.reactions:
            self.reaction = reaction

        #####################################
            # This block will search the directory for existing logs and irc calcs (if recalculate=False)
            # If there is an existing log, we will try to validate it with vibrational analysis
            # If vibrational analysis fails, we will check for irc logs to try to find and validate a ts
            # If there is no existing log, we will look for irc logs
            # If we cant find a validated TS, we will restart the calculation

            log_path = os.path.join(self.directory, "ts", self.reaction.label, self.reaction.label + ".log")
            irc_folder = os.path.join(self.directory, "ts", reaction.label, 'irc')
            if os.path.exists(log_path) and recalculate is False:
                logging.info("A log file already exists for reaction {}".format(reaction.label))
                logging.info("Trying to validate TS with existing log file through Vibrational Analysis...")
                lines = open(log_path).readlines()[0:10]
                direction = None
                for line in lines:
                    if 'Output=' in line:
                        if 'reverse' in line:
                            direction = 'reverse'
                            break
                        elif 'forward' in line:
                            direction = 'forward'
                            break
                
                validated = False
                if direction:
                    ts = reaction.ts[direction][0]
                    vib = VibrationalAnalysis(
                        transitionstate=ts, directory=self.directory)
                    validated = vib.validate_ts()
                else:
                    directions = ['forward','reverse']
                    for direction in directions:
                        ts = reaction.ts[direction][0]
                        vib = VibrationalAnalysis(
                        transitionstate=ts, directory=self.directory)
                        validated = vib.validate_ts()
                        if validated:
                            break
                
                if validated:
                    logging.info("Existing TS has been validated from vibrational analysis from reaction {}".format(reaction.label))
                    logging.info("The TS log file is {} :)".format(log_path))
                    calculation_status[reaction] = True
                    if calculate_fod:  # We will run an orca FOD job
                        # Update the lowest energy conformer 
                        # with the lowest energy logfile
                        atoms = self.read_log(log_path)
                        ts.ase_molecule = atoms
                        ts.update_coords_from("ase")
                        self.calculate_fod(conformer=ts)
                    continue
                else:
                    logging.info("Could not validate existing TS for {} through Vibrational Analysis...checking for irc jobs".format(
                        reaction.label))

                    got_one = self.check_irc_folder(reaction)
                    if got_one:
                        calculation_status[reaction]=True
                        if calculate_fod:  # We will run an orca FOD job
                            # Update the lowest energy conformer 
                            # with the lowest energy logfile
                            atoms = self.read_log(log_path)
                            ts.ase_molecule = atoms
                            ts.update_coords_from("ase")
                            self.calculate_fod(conformer=ts)
                        continue
                    else:
                        logging.info("Could not validate existing TS from vibrational analysis or irc...removing {}".format(log_path))
                        os.remove(log_path)
                        pass

            elif os.path.exists(irc_folder) and recalculate is False:
                logging.info(
                    "It appears irc jobs were run...trying to validate from existing ircs")
                got_one = self.check_irc_folder(reaction)
                if got_one:
                    calculation_status[reaction] = True
                    ts = reaction.ts["forward"][0] # get ts instance of reaction
                    if calculate_fod:  # We will run an orca FOD job
                        # Update the lowest energy conformer 
                        # with the lowest energy logfile
                        atoms = self.read_log(log_path)
                        ts.ase_molecule = atoms
                        ts.update_coords_from("ase")
                        self.calculate_fod(conformer=ts)                                                                    
                    continue
                else:
                    calculation_status[reaction] = False
                    logging.info(
                        "We could not find an irc validated transition state :(")
                    continue
        
        #####################################

            logging.info("Calculating geometries for {}".format(self.reaction))

            if self.conformer_calculator:
                self.reaction.generate_conformers(ase_calculator=self.conformer_calculator)

            currently_running = []
            processes = {}

            for direction, transitionstates in list(self.reaction.ts.items()):

                for transitionstate in transitionstates:

                    process = Process(target=self.calculate_transitionstate, args=(
                        transitionstate,))
                    processes[process.name] = process

            for name, process in list(processes.items()):
                while len(currently_running) >= 50:
                    for running in currently_running:
                        if not running.is_alive():
                            currently_running.remove(name)
                process.start()
                currently_running.append(name)

            while len(currently_running) > 0:
                for name, process in list(processes.items()):
                    if not (name in currently_running):
                        continue
                    if not process.is_alive():
                        currently_running.remove(name)

            energies = []
            for label, result in global_results.items():
                if not result:
                    logging.info("Calculations for {} FAILED".format(label))
                    continue
                f = "{}.log".format(label)
                path = os.path.join(self.calculator.directory, "ts",
                        self.reaction.label, "conformers", f)
                if not os.path.exists(path):
                    logging.info("It appears that {} failed...".format(f))
                    continue
                try:
                    parser = ccread(path, loglevel=logging.ERROR)
                    if parser is None:
                        logging.info(
                            "Something went wrong when reading in results for {}...".format(f))
                        continue
                    energy = parser.scfenergies[-1]
                except:
                    logging.info(
                        "The parser does not have an scf energies attribute, we are not considering {}".format(f))
                    energy = 1e5

                energies.append([energy, transitionstate, f])

            energies = pd.DataFrame(
                energies, columns=["energy", "transitionstate", "file"]).sort_values("energy").reset_index()

            if energies.shape[0] == 0:
                logging.info(
                    "No transition state for {} was successfully calculated... :(".format(self.reaction))
                continue
                calculation_status[self.reaction] = False

            energies.reset_index(inplace=True)
            lowest_energy_label = energies.iloc[0].file
            logging.info("The lowest energy transition state is {}".format(lowest_energy_label))

            copyfile(
                os.path.join(self.calculator.directory, "ts", self.reaction.label,
                            "conformers", lowest_energy_label),
                os.path.join(self.calculator.directory, "ts",
                            self.reaction.label, self.reaction.label + ".log")
            )
            logging.info("The lowest energy file is {}! :)".format(
                lowest_energy_label + ".log"))
            calculation_status[self.reaction] = True
        
            if calculate_fod:  # We will run an orca FOD job

                # Update the lowest energy conformer
                # with the lowest energy logfile
                ts = reaction.ts["forward"][0] #get sample ts for reaction
                lowest_energy_file_path = os.path.join(self.calculator.directory, "ts",
                             self.reaction.label, self.reaction.label + ".log")
                atoms = self.read_log(lowest_energy_file_path)
                ts.ase_molecule = atoms
                ts.update_coords_from("ase")
                self.calculate_fod(conformer=ts)

        logging.info(calculation_status)
        if False in calculation_status.values() or len(calculation_status.values()) == 0:
            return False
        else:
            return True

    def validate_transitionstate(self, transitionstate, vibrational_analysis=True):

        validated = False
        if vibrational_analysis:
            vib = VibrationalAnalysis(
                transitionstate=transitionstate, directory=self.directory)
            validated = vib.validate_ts()
        if not validated:
            logging.info("Could not validate with Vibrational Analysis... Running an IRC to validate instead...")
            label = self.submit_transitionstate(
                transitionstate, opt_type="irc")
            while not self.check_complete(label):
                time.sleep(15)
            result = self.calculator.validate_irc()
            if result:
                logging.info("Validated via IRC")
                return True
            else:
                logging.info(
                    "Could not validate this conformer... trying the next lowest energy conformer")
                return False
        else:
            logging.info("Validated via Vibrational Analysis")
            return True

#################################################################################

    def submit_rotor(self, conformer, torsion_index):
        """
        A methods to submit a job based on the calculator and partition provided
        """
        assert conformer, "Please provide a conformer to submit a job"

        ase_calculator = self.calculator.get_rotor_calc(conformer, torsion_index)

        self.write_input(conformer, ase_calculator)

        file_path = os.path.join(ase_calculator.scratch, ase_calculator.label)

        os.environ["COMMAND"] = "g16"  # only using gaussian for now
        os.environ["FILE_PATH"] = file_path

        attempted = False
        if os.path.exists(file_path + ".log"):
            attempted = True
            logging.info(
                "It appears that this job has already been run, not running it a second time.")

        if not attempted:
            subprocess.call(
                """sbatch --exclude=c5003,c3040 --job-name="{0}" --output="{0}.slurm.log" --error="{0}.slurm.log" -p {1} -N 1 -n 20 -t 8:00:00 --mem=100000 $AUTOTST/autotst/job/submit.sh""".format(
                    label, self.partition), shell=True)

        return label

    def calculate_rotors(self, conformer, steps=36, step_size=10.0):

        complete = {}
        calculators = {}
        verified = {}
        if len(conformer.torsions) == 0:
            logging.info("No torsions to run scans on.")
            return {}

        for torsion in conformer.torsions:
            label = self.submit_rotor(
                conformer, torsion.index)
            logging.info(label)
            complete[label] = False
            verified[label] = False

        done = False
        lowest_energy_label = None
        conformer_error = False

        while not done:
            for label in list(complete.keys()):
                if not self.check_complete(label):
                    continue
                if done:
                    continue
                complete[label] = True
                lowest_conf, continuous, good_slope, opt_count_check = self.verify_rotor( ##################################
                    conformer, label)
                if all([lowest_conf, continuous]):
                    verified[label] = True
                else:
                    verified[label] = False

                if not lowest_conf:
                    done = True
                    lowest_energy_label = label
                    conformer_error = True
                    continue
                elif all(complete.values()):
                    done = True

        if conformer_error:
            logging.info(
                "A lower energy conformer was found... Going to optimize this insted")
            for label in list(complete.keys()):
                subprocess.call("""scancel -n '{}'""".format(label), shell=True)
            if isinstance(conformer, TS):
                file_name = os.path.join(
                    self.directory, "ts", conformer.reaction_label, "rotors", lowest_energy_label + ".log")
            else:
                file_name = os.path.join(
                    self.directory, "species",conformer.smiles , "rotors", lowest_energy_label + ".log")
            parser = ccread(file_name, loglevel=logging.ERROR)
            first_is_lowest, min_energy, atomnos, atomcoords = self.check_rotor_lowest_conf(
                parser=parser)
            symbol_dict = {
                35: "Br",
                17: "Cl",
                9:  "F",
                8:  "O",
                7:  "N",
                6:  "C",
                1:  "H",
            }
            atoms = []
            for atom_num, coords in zip(parser.atomnos, parser.atomcoords[-1]):
                atoms.append(
                    Atom(symbol=symbol_dict[atom_num], position=coords))
            conformer.ase_molecule = Atoms(atoms)
            conformer.update_coords_from("ase")
            for index in ["X", "Y", "Z"]:
                if index != conformer.index:
                    logging.info("Setting index of {} to {}...".format(conformer, index))
                    conformer.index = index
                    break

            label = self.submit_conformer(conformer)

            while not self.check_complete(label):
                time.sleep(15)

            logging.info(
                "Reoptimization complete... performing hindered rotors scans again")
            return self.calculate_rotors(conformer, steps, step_size)

        else:
            for label, boolean in list(verified.items()):
                if not boolean:
                    try:
                        if isinstance(conformer, TS):
                            file_path = os.path.join(
                                self.directory, "ts", conformer.reaction_label, "rotors")
                        else:
                            file_path = os.path.join(
                                self.directory, "species",conformer.smiles , "rotors")

                        os.mkdirs(os.path.join(file_path, failures))
                    except:
                        pass
                    move(
                        os.path.join(file_path, label + ".log"),
                        os.path.join(file_path, "failures",
                                     label + ".log")
                    )
            return verified

    def verify_rotor(self, conformer, label, steps=36, step_size=10.0):

        if isinstance(conformer, TS):
            file_name = os.path.join(
                self.directory, "ts", conformer.reaction_label, "rotors", label  + ".log")
        elif isinstance(conformer, Conformer):
             file_name = os.path.join(
                self.directory, "species", conformer.smiles, "rotors", label  + ".log")           
        parser = cclib.io.ccread(file_name, loglevel=logging.ERROR)

        continuous = self.check_rotor_continuous(
            steps, step_size, parser=parser)
        good_slope = self.check_rotor_slope(steps, step_size, parser=parser)
        [lowest_conf, energy, atomnos,
            atomcoords] = self.check_rotor_lowest_conf(parser=parser)
        opt_count_check = self.check_rotor_opts(steps, parser=parser)

        return [lowest_conf, continuous, good_slope, opt_count_check]

    def check_rotor_opts(self, steps, parser):


        #opt_indices = [i for i, status in enumerate(parser.optstatus) if status==2]
        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status > 1]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        n_opts_check = (steps + 1) == len(opt_SCFEnergies)

        return n_opts_check

    def check_rotor_slope(self, steps, step_size, parser, tol=0.1):


        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)

        max_slope = (max_energy - min_energy) / step_size
        slope_tol = tol*max_slope

        for i, energy in enumerate(opt_SCFEnergies):
            prev_energy = opt_SCFEnergies[i-1]
            slope = np.absolute((energy-prev_energy)/float(step_size))
            if slope > slope_tol:
                return False

        return True

    def check_rotor_continuous(self, steps, step_size, parser, tol=0.1):

        assert isinstance(step_size, float)

        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)
        energy_tol = np.absolute(tol*(max_energy - min_energy))

        checked = [None for angle in range(0, 360)]

        continuous = True

        for step, energy in enumerate(opt_SCFEnergies):
            abs_theta = int(step*step_size)
            theta = abs_theta % 360

            mismatch = False

            if checked[theta] is None:
                checked[theta] = energy

            else:
                checked_energy = checked[theta]

                abs_diff = np.absolute(energy - checked_energy)

                if abs_diff > energy_tol:
                    mismatch = True
                    continuous = False
                    return False

        return continuous

    def check_rotor_lowest_conf(self, parser, tol=0.1):

        opt_indices = [i for i, status in enumerate(
            parser.optstatus) if status in [2, 4]]
        opt_SCFEnergies = [parser.scfenergies[index] for index in opt_indices]

        max_energy = max(opt_SCFEnergies)
        min_energy = min(opt_SCFEnergies)
        energy_tol = tol*(max_energy - min_energy)

        first_is_lowest = True  # Therefore...
        min_idx = 0
        min_energy = opt_SCFEnergies[min_idx]

        for i, energy in enumerate(opt_SCFEnergies):
            if min_energy - energy > energy_tol:
                min_energy = energy
                min_idx = i

        if min_idx != 0:
            first_is_lowest = False

        min_opt_idx = opt_indices[min_idx]

        atomnos = parser.atomnos
        atomcoords = parser.atomcoords[min_opt_idx]

        return [first_is_lowest, min_energy, atomnos, atomcoords]
